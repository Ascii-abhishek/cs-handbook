{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Python Handbook \u00b6 Preface \u00b6 During the past 3 years of my Python experience, I came to realize that if you have mastered any subject and somehow loose practice over some time, you have to revisit your favourite learning resources to keep up with the world. But, Almost all learning sources are made with keeping in mind that it will be browsed by a very beginner. So, without any choice you have to read through all the theory part as well to understand the concept. Enters Python Handbook into the picture. Here we have skipped all the extra reading text and presented only the essential components with direct brief information/description and demo examples. So, you can pace your understanding and come back any time to refresh a specific topic or just a single liner. About the Author \u00b6 I am Abhishek Pathak, a python enthusiast with Bachelor of Technology degree in Computer Science . I'm currently employed in Samsung Research Institute as a Software Engineer for more than a year. I love teaching and making content easily understandable to others by converting it into a storyline with my creativity.","title":"Home"},{"location":"#welcome-to-python-handbook","text":"","title":"Welcome to Python Handbook"},{"location":"#preface","text":"During the past 3 years of my Python experience, I came to realize that if you have mastered any subject and somehow loose practice over some time, you have to revisit your favourite learning resources to keep up with the world. But, Almost all learning sources are made with keeping in mind that it will be browsed by a very beginner. So, without any choice you have to read through all the theory part as well to understand the concept. Enters Python Handbook into the picture. Here we have skipped all the extra reading text and presented only the essential components with direct brief information/description and demo examples. So, you can pace your understanding and come back any time to refresh a specific topic or just a single liner.","title":"Preface"},{"location":"#about-the-author","text":"I am Abhishek Pathak, a python enthusiast with Bachelor of Technology degree in Computer Science . I'm currently employed in Samsung Research Institute as a Software Engineer for more than a year. I love teaching and making content easily understandable to others by converting it into a storyline with my creativity.","title":"About the Author"},{"location":"Python/_py_modules/calendar/","text":"layout: default title: CALENDAR Module permalink: /:collection/:name","title":"Calendar"},{"location":"Python/_py_modules/csv/","text":"import csv with open ( 'abc.csv' , 'r' ) as csv_file : csv_reader = csv . reader ( csv_file ) # csv_reader is like file object. we have to work on it next ( csv_reader ) # to skip first row (if that is column names) for line in csv_reader : print ( line ) with open ( 'abc.csv' , 'r' ) as csv_file : csv_reader = csv . reader ( csv_file ) with open ( 'new_names.csv' , 'w' ) as new_file : csv_writer = csv . writer ( new_file , delimiter = '-' ) csv_writer . writeheader () # first row for line in csv_reader : # also print first row csv_writer . writerow ( line ) with open ( 'abc.csv' , 'r' ) as csv_file : csv_reader = csv . DictReader ( csv_file ) with open ( 'new_names.csv' , 'w' ) as new_file : fieldnames = [ 'first' , 'second' , 'third' ] csv_writer = csv . DictWriter ( new_file , fieldnames = fieldnames , delimiter = ',' ) for line in csv_reader : csv_writer . writerow ( line ) # print as a dictionary, first row values as key for each line values","title":"CSV Module"},{"location":"Python/_py_modules/datetime/","text":"import datetime import pytz d = datetime . date ( 2016 , 7 , 24 ) # dont write 7 as 07, it will return error tdelta = datetime . timedelta ( days = 7 ) print ( tdelta ) # 7 days, 0:00:00 # date1 +- date2 = timedelta # timedelta +- date1 = date2 tday = datetime . date ( 2018 , 9 , 15 ) tday . day tday . month tday . year tday . weekday () # monday == 0 tday . isoweekday () # monday == 1, (iso-weekday) t = datetime . time ( 9 , 30 , 45 , 10000 ) t . hour t . minutes t . seconds dt = datetime . datetime ( 2016 , 7 , 26 , 12 , 30 , 45 , 100000 ) dt . date () dt . time () dt . day dt . minute dt_today = datetime . datetime . today () # returns local time dt_now = datetime . datetime . now ( tz = pytz . UTC ) # returns local time but we can provide timezone dt_utcnow = datetime . datetime . utcnow () Note: Don\u2019t name your .py file as 'datetime' or any other module you are importing.","title":"DateTime Module"},{"location":"Python/_py_modules/json/","text":"working with json given as a string: \u00b6 import json people_string = ''' { \"people\": [ { \"name\": \"abhishek pathak\", \"phone\": \"9999999990\", \"emails\": [\"abhishek@gmail.com\", \"abhishek@hotmail.com\"], \"has_license\": false }, { \"name\": \"jane doe\", \"phone\": \"0120-4096528\", \"emails\": null, \"has_license\": true } ] } ''' data = json . loads ( people_string ) # to convert json into python object (like dictionary) for person in data [ 'people' ]: # working on json -> python object del person [ 'phone' ] new_string = json . dumps ( data , indent = 2 , sort_keys = True ) # to convert python object into json # indent paramenter will prettify print(new_string) output # sort_key will sort items alphabetically Working with json given as a separate file: \u00b6 import json with open ( 'states.json' ) as f : data = json . load ( f ) for state in data [ 'states' ]: del state [ 'area_codes' ] with open ( 'new_states.json' , 'w' ) as f : json . dump ( data , f , indent = 4 )","title":"JSON Module"},{"location":"Python/_py_modules/json/#working-with-json-given-as-a-string","text":"import json people_string = ''' { \"people\": [ { \"name\": \"abhishek pathak\", \"phone\": \"9999999990\", \"emails\": [\"abhishek@gmail.com\", \"abhishek@hotmail.com\"], \"has_license\": false }, { \"name\": \"jane doe\", \"phone\": \"0120-4096528\", \"emails\": null, \"has_license\": true } ] } ''' data = json . loads ( people_string ) # to convert json into python object (like dictionary) for person in data [ 'people' ]: # working on json -> python object del person [ 'phone' ] new_string = json . dumps ( data , indent = 2 , sort_keys = True ) # to convert python object into json # indent paramenter will prettify print(new_string) output # sort_key will sort items alphabetically","title":"working with json given as a string:"},{"location":"Python/_py_modules/json/#working-with-json-given-as-a-separate-file","text":"import json with open ( 'states.json' ) as f : data = json . load ( f ) for state in data [ 'states' ]: del state [ 'area_codes' ] with open ( 'new_states.json' , 'w' ) as f : json . dump ( data , f , indent = 4 )","title":"Working with json given as a separate file:"},{"location":"Python/_py_modules/maths/","text":"import math as m Command Description m.ceil(x) ceil value m.fabs(x) absolute value m.factorial(x) factorial of x m.floor(x) floor value of x m.fmod(x) m.frexp(x) (m,e) : x = m*2^e m.fsum(mylist) returns accurate float sum m.gcd(x, y) HCF of x and y m.isnan(x) True if x is not a number m.modf(5.33) (0.33999...9, 5.0) m.remainder(x, y) x/y m.exp(x) e^x m.expm1(x) e^x - 1 m.log(x, base) if no base given then ln(x) m.pow(x, y) x^y m.sqrt(x) square root of x m.degrees(x) radian to degree m.radians(x) degree to radian Constants \u00b6 Command Description m.pi 3.141592 m.e 2.718 m.tau 6.28318 m.inf inf m.nan not a number","title":"Math Module"},{"location":"Python/_py_modules/maths/#constants","text":"Command Description m.pi 3.141592 m.e 2.718 m.tau 6.28318 m.inf inf m.nan not a number","title":"Constants"},{"location":"Python/_py_modules/numpy/","text":"Functions or Methods Description np.array(object, dtype=None, copy=True, order=\u2019K\u2019, subok=False, ndmin=0) Creating a new numpy array, Order: C \u2013 row major, F- Column major ndarray[3, 4] equivalent to ndarray[3][4] ndarray.ndim Dimension of array, (rows, columns) ndarray.itemsize Size of each element datatype ndarray.dtype Data type of elements ndarray.size Number of elements in the array ndarray.shape (rows, columns) ndarray.reshape(row, column) Change the current dimension to given dimensions ndarray.sum(axis=0) Total sum if axis not given else 0 \u2013 column wise, 1 \u2013 row wise ndarray.ravel() Converting ndarray to one dimensional array ndarray.dot(ndarray2) Dot product of two matrix ndarray.T Transpose of ndarray matrix ndarray.max() / min() return max/min value of array ndarray.argmax() / argmin() return index of max / min value in array arr_copy = ndarray.copy() copy array to another variable # arr2 = ndarray[0:n] => it doesnt copy part of ndarray and put in arr2, but just reference, so any change in arr2 will reflect in ndarray np.linespace(start, end, values) Equally separated numbers from start to end, values is no of elements required np.logspace(start, end, values) Equally separated log(numbers) from start to end np.arange(start, stop, steps) like range method, \u2018steps\u2019 separated values from start to stop np.zeros((rows, columns)) Zero matrix, all elements are 0, inside is a tuple np.ones((rows, columns)) Ones matrix (all elements are one) np.eye(rows, column) Identity matrix, has diagonal of 1 np.empty((rows, column)) Matrix with random numbers np.std(ndarray) Standard deviation of each element of ndarray np.nditer(ndarray) Iterate through each element of ndarray np.sort(ndarray, axis=-1, kind=\u2019quicksort\u2019, order=None) Sorting numpy array np.sqrt(ndarray) np.exp(ndarray) np.max(ndarray) np.sin(ndarray) basic operations np.random.rand(row, col) 2D matrics of row*col random numbers from 0 to 1, can pass single arg for 1D array np.random.randn(2) # can be randn(row, col) 2 numbers equally distant from 0 => (0.1748905, -0.917962014)","title":"NUMPY"},{"location":"Python/_py_modules/os/","text":"Command Description os.access('file', mode) mode: os.F_OK: found os.R_OK: readable os.W_OK: writable os.X_OK: executable returns True or false based on mode, 'file' means full path to specific file os.chdir('path') change current working directory to path os.chmod('file', mode) mode: stat.S_ISUID : Set user ID on execution stat.S_ISGID : Set group ID on execution stat.S_ENFMT : Enforced record locking stat.S_ISVTX : After execution, save text image stat.S_IREAD : Read by owner stat.S_IWRITE : Write by owner stat.S_IEXEC : Execute by owner stat.S_IRWXU : Read, write, and execute by owner stat.S_IRUSR : Read by owner stat.S_IWUSR : Write by owner stat.S_IXUSR : Execute by owner stat.S_IRWXG : Read, write, and execute by group stat.S_IRGRP : Read by group stat.S_IWGRP : Write by group stat.S_IXGRP : Execute by group stat.S_IRWXO : Read, write, and execute by others stat.S_IROTH : Read by others stat.S_IWOTH : Write by others stat.S_IXOTH : Execute by others Alter the mode of the file, multiple modes can be applied by using 'or' os.chown('file', uid, gid) # os.chown('ab.txt', 100, -1) change ownership of file, use -1 to leave it unchanged uid: numeric user ID gid: numeric group ID os.chroot(path) change root directory (UNIX) d_fd = os.dup(fd) create duplicate file descriptor os.environ Returns all environment variables. Use os.environ([\u201cHOME\u201d]) like to get specific one. os.getenv(key, default=none) Return the value of the environment variable key if it exists, or default if it doesn\u2019t. os.get_exec_path(env=none) Returns the list of dirs that will be searched for a named executable (like \u2018bin\u2019 folder) os.getlogin() Returns the name of user logged in. os.getpid() Returns current process id os.getcwd() returns current working directory os.isatty(fd) returns true if fd is open and is connected to a tty(-like) device, else returns flase os.listdir(path) returns list of all items present in path os.lseek(fd, pos, how) how: os.SEEK_SET or 0: pos relative to the beginning of file os.SEEK_CUR or 1: current position os.SEEK_END or 2: end of the file Set current position of fd to pos, modified by how os.major(device) os.minor(device) takes a raw device number, and returns the device major, minor number (usually the x.st_dev or x.st_rdev field from x=os.stat('file')) os.makedirs(path, mode) #os.makedirs('tmp/a/b/c', 0755) like mkdir() (make directory), but here to make c it can also create a and b if not exists os.putenv(key, value) Set new environment variables os.remove(file) remove a file. if path is given instead of file, OSError will be raised os.removedirs(path) remove all directories given in path os.rename(src, dst) rename src to dst, if dst already exists, it raises OSError os.rmdir(path) remove a directory os.stat(path/file) gives following info about the file or path st_mode: protection bits st_ino: inode number st_dev: device st_nlink: number of hard links st_uid: user id of owner st_gid: group id of owner st_size: size of file, in bytes st_atime: time of most recent access st_mtime: time of most recent content modification st_ctime: time of most recent metadata change. os.symlink(src, dst) create symbolic link of src folder by name dst. just like desktop shortcut but its for directories not files os.tmpfile() temporary file object. deletes itself when no descriptor os.uname() Returns system-dependent version information os.unsetenv(key) Delete the environment variable named key os.umask(mask) Set current numeric umask and return previous umask os.walk(top[, topdown=True, onerror=None, followlinks=False) top: Each directory rooted at directory topdown: If topdown is True, or not specified, it scans directories top-down. onerror: This may show an error to continue with the walk, or may raise an exception to abort the walk. followlinks: This will visit directories that symlinks points to, that is, if set to true. returns a generator, Every time the generator is called it will follow each directory recursively until no further sub-directories are available from the initial directory that walk was called upon. It Returns: 1. Generated directory path 2. Directories in current generated directory 3. Files in current generated directory os.path. 1. join('path1', 'path2') 2. basename(path) 3. dirname(path) 4. split(path) 5. exists('path') 6. isdir() 7. isfile() 8. splitext('path') 1. Returns joined paths 2. returns base name 3. directory name 4. ['dir', 'file_name'] 5. True /False 6. True / False 7. True /False 8. ['path/file_name', 'file_extension']","title":"OS Module"},{"location":"Python/_py_modules/pandas/","text":"import pandas as pd na_values = [ 'NA' , 'Missing' , 'Null' ] # df will consider all these values as NaN df = pd . read_csv ( 'abc.csv' , na_values = na_values ) Pandas methods \u00b6 Command Description pd.set_option('display.max_columns', 10) Show 10 columns in jupyter notebook pd.set_option('display.max_rows', 40) Show 40 rows in jupyter notebook Pandas property constants \u00b6 Command Description df.shape (64, 11) df.columns list of all columns df.index returns list of index values df.dtypes data types of all pandas Pandas Methods \u00b6 Command Description df.info() data_type, no_of_rows of each column df.head(10) first 10 rows, 5 if argument is not passed df.tail(10) last 10 rows, 5 if argument is not passed df.set_index('10_201909', inplace=False) set a column as index df.sort_index(ascending=False, inplace=False) sort rows by index, descending order df.reset_index(inplace=True) reset dataframe's index df.rename(columns={'col1': 'val1', 'col2': 'val2'}, inplace=True) rename only some column names df.apply(len) returns length of each column, considering columns (Series) as a single entity df.applymap(len) len will be applied to each value of all columns (all values of df) df.drop(columns=['col1', 'col2'], index=2, inplace=False) Delete multiple columns, third row df.drop(index=df['filter'].index) check below for filter df.append('df2', ignore_index=True, sort=False) No inplace arg here, we have to assign it to df itself df.sort_values(by=['col_name', 'col_2'], ascending=[False, True]) sort dataframe rows by col_name, first sort by col_name (descending), then by col_2 for common values in col_name (ascending) df.nlargest(10, 'col_name') returns df with 10 largest values of col_name df.nsmallest(10, 'col_name') returns df with 10 smallest values of col_name df.replace('NA', numpy.nan, inplace=True) replace all NA strings in whole df with numpy nan df.isna() returns boolean df with True for NaN values df.fillna('other_str') replace all NaN with other_str df.to_csv('path/modified.csv') export df to a csv file df.dropna(axis='index', how='any', subset=['email']) drop all rows where email is NaN, if multiple subset then drop rows where both are NaN - - df['col_name'].sort_values() return a sorted series df['col_name'].nlargest(10) highest 10 values of col_name, returns series df['10_201909'].value_counts() count frequency of all unique values in 10_201909 column df['age'].astype(float) by default numbers are parsed as strings, and we can convert np.NaN to float but not int so best practice to convert all to float df['age'].mean() returns mean of age column df['age'].unique() returns a list of all unique values in the age column df['age'].replace('text', 0, inplace=True) replace text with 0 Accessing \u00b6 columns \u00b6 Command Description df['10_201909'] accessing '10_201909' df[['10_201909', '10_201910', '10_201909']] accessing multiple columns rows \u00b6 Command Description df.iloc[1] accesing second (single) row, index starting from 0 df.iloc[[0, 1, 3, 7]] accessing multiple rows df.iloc[[2, 5], 1] second column, third and sixth rows df.iloc[[1, 5], [3, 8]] accessing via multiple rows and column (indexes) --- --- df.loc[[0, 1, 3], ['10_201909', '10_201910', '10_201909']] accessing via labels instead of indexes df.loc[0:21, '10_201909'] 0 to 21 (inclusive row values of 10_201909 column) df.loc[0:5, '10_201909': '10_201912'] row and column slicing","title":"Pandas"},{"location":"Python/_py_modules/pandas/#pandas-methods","text":"Command Description pd.set_option('display.max_columns', 10) Show 10 columns in jupyter notebook pd.set_option('display.max_rows', 40) Show 40 rows in jupyter notebook","title":"Pandas methods"},{"location":"Python/_py_modules/pandas/#pandas-property-constants","text":"Command Description df.shape (64, 11) df.columns list of all columns df.index returns list of index values df.dtypes data types of all pandas","title":"Pandas property constants"},{"location":"Python/_py_modules/pandas/#pandas-methods_1","text":"Command Description df.info() data_type, no_of_rows of each column df.head(10) first 10 rows, 5 if argument is not passed df.tail(10) last 10 rows, 5 if argument is not passed df.set_index('10_201909', inplace=False) set a column as index df.sort_index(ascending=False, inplace=False) sort rows by index, descending order df.reset_index(inplace=True) reset dataframe's index df.rename(columns={'col1': 'val1', 'col2': 'val2'}, inplace=True) rename only some column names df.apply(len) returns length of each column, considering columns (Series) as a single entity df.applymap(len) len will be applied to each value of all columns (all values of df) df.drop(columns=['col1', 'col2'], index=2, inplace=False) Delete multiple columns, third row df.drop(index=df['filter'].index) check below for filter df.append('df2', ignore_index=True, sort=False) No inplace arg here, we have to assign it to df itself df.sort_values(by=['col_name', 'col_2'], ascending=[False, True]) sort dataframe rows by col_name, first sort by col_name (descending), then by col_2 for common values in col_name (ascending) df.nlargest(10, 'col_name') returns df with 10 largest values of col_name df.nsmallest(10, 'col_name') returns df with 10 smallest values of col_name df.replace('NA', numpy.nan, inplace=True) replace all NA strings in whole df with numpy nan df.isna() returns boolean df with True for NaN values df.fillna('other_str') replace all NaN with other_str df.to_csv('path/modified.csv') export df to a csv file df.dropna(axis='index', how='any', subset=['email']) drop all rows where email is NaN, if multiple subset then drop rows where both are NaN - - df['col_name'].sort_values() return a sorted series df['col_name'].nlargest(10) highest 10 values of col_name, returns series df['10_201909'].value_counts() count frequency of all unique values in 10_201909 column df['age'].astype(float) by default numbers are parsed as strings, and we can convert np.NaN to float but not int so best practice to convert all to float df['age'].mean() returns mean of age column df['age'].unique() returns a list of all unique values in the age column df['age'].replace('text', 0, inplace=True) replace text with 0","title":"Pandas Methods"},{"location":"Python/_py_modules/pandas/#accessing","text":"","title":"Accessing"},{"location":"Python/_py_modules/pandas/#columns","text":"Command Description df['10_201909'] accessing '10_201909' df[['10_201909', '10_201910', '10_201909']] accessing multiple columns","title":"columns"},{"location":"Python/_py_modules/pandas/#rows","text":"Command Description df.iloc[1] accesing second (single) row, index starting from 0 df.iloc[[0, 1, 3, 7]] accessing multiple rows df.iloc[[2, 5], 1] second column, third and sixth rows df.iloc[[1, 5], [3, 8]] accessing via multiple rows and column (indexes) --- --- df.loc[[0, 1, 3], ['10_201909', '10_201910', '10_201909']] accessing via labels instead of indexes df.loc[0:21, '10_201909'] 0 to 21 (inclusive row values of 10_201909 column) df.loc[0:5, '10_201909': '10_201912'] row and column slicing","title":"rows"},{"location":"Python/_py_modules/pil/","text":"from PIL import Image , ImageFilter import os imag = Image . open ( 'xyz.jpeg' ) imag . show () # open image in image viewer imag . save ( 'xyz.png' ) # save file with other extension for f in os . listdir ( '.' ): # current directory if f . endswith ( '.jpeg' ): i = Image . open ( f ) fn , fext = os . path . splittext ( f ) # extract filename and file extension i . save ( f 'other_dir/ { fn } .png' ) # save each file with other file extension and same name size_300 = ( 300 , 300 ) # tuple img . thumbnail ( size_300 ) . save ( f 'other_dir/ { fn } . { fext } ' ) # changing the resolution img . rotate ( 90 ) . save ( 'image_modified.jpeg' ) # rotate clockwise img . convert ( mode = 'L' ) . save ( 'image_modified.jpeg' ) # black and white img . filter ( ImageFilter . GaussianBlur ( 10 )) . save ( 'image_modified.jpeg' ) # Blur Image, 10 is level of Blur","title":"PIL (Pillow) Module"},{"location":"Python/_py_modules/pip/","text":"Command Description $ pip help [option] $ pip search package_name $ pip install [option] package pip install -r requirements.txt -U : update -r : install from requirements.txt\" $ pip uninstall package Uninstall a pip package $ pip list [option] -o : outdated $ pip freeze > abc.txt all installed packages in requirement type list to export $ pip install nbopen $ python -m nbopen.install_win open .ipynb files into jupyter notebook by default $ pip install pip-review $ pip-review --local --interactive update all pip packages with one liner","title":"PIP"},{"location":"Python/_py_modules/py_mongo/","text":"PyMongo \u00b6 PyMongo is a Python library that enables us to connect with MongoDB and perform all database operations on MongoDB database. This is a third party library. So, you need to install it to use. pip install pymongo . Official documentation site: link Code Description from pymongo import MongoClient Import pymongo client connection class client = MongoClient() client = MongoClient('mongodb://localhost:27017/') client = MongoClient('localhost', 27017) Creating a connection, if no argument is passed then it will connect to localhost default. all given code lines results same. db = client.test_database db = client['test-database'] Create a new database","title":"PyMongo"},{"location":"Python/_py_modules/py_mongo/#pymongo","text":"PyMongo is a Python library that enables us to connect with MongoDB and perform all database operations on MongoDB database. This is a third party library. So, you need to install it to use. pip install pymongo . Official documentation site: link Code Description from pymongo import MongoClient Import pymongo client connection class client = MongoClient() client = MongoClient('mongodb://localhost:27017/') client = MongoClient('localhost', 27017) Creating a connection, if no argument is passed then it will connect to localhost default. all given code lines results same. db = client.test_database db = client['test-database'] Create a new database","title":"PyMongo"},{"location":"Python/_py_modules/random/","text":"Random Module \u00b6 import random Command Description random.random() float number [0, 1) random.uniform(1, 10) like above, just takes parameters random.randint(1, 6) integer numbers [1, 6] random.choice(arr) random value from given array 'arr' random.choices(arr, k=10) list of 10 random values chosen from array, repeated values random.shuffle(arr) same no of elemnts but indexes changed random.sample(arr, k=5) 5 unique and random elemnts from arr arr = ['red', 'black', 'green'] random.choices(arr, weigths=[18, 18, 2], k=10) >> probabity of red = 18/(18+18+2=38); black = 18/38; green = 2/38","title":"Random Module"},{"location":"Python/_py_modules/random/#random-module","text":"import random Command Description random.random() float number [0, 1) random.uniform(1, 10) like above, just takes parameters random.randint(1, 6) integer numbers [1, 6] random.choice(arr) random value from given array 'arr' random.choices(arr, k=10) list of 10 random values chosen from array, repeated values random.shuffle(arr) same no of elemnts but indexes changed random.sample(arr, k=5) 5 unique and random elemnts from arr arr = ['red', 'black', 'green'] random.choices(arr, weigths=[18, 18, 2], k=10) >> probabity of red = 18/(18+18+2=38); black = 18/38; green = 2/38","title":"Random Module"},{"location":"Python/_py_modules/regular_expression/","text":"RE (Regular Expression) Module \u00b6 RE Description . Any character except new line \\d Digit (0 - 9) \\D Not a Digit \\w Word character (a-z, A-Z, 0-9, _) \\W Not a word character \\s Whitespace (space, tab, newline) \\S Not whitespace \\b Word boundary #\\bha means space or nothing before 'ha' \\B Not a word boundary ^ Beginning of a string $ End of a string [] Matches characters in bracket, no need for \\ inside in case of escape characters, [1-7] == [1234567] != [-17] [^ ] Matches characters not in bracket, [^a-c] == all letters except a,b,c | Either Or () Group Quantifiers * 0 or more + 1 or more ? 0 or 1 {3} Exact number {3, 4} Range of numbers (minimum, maximum) Meta Characters .[{()\\^$?*+ need to be escaped by \\ (back slash) Text Regular Expression abcdefghijklmnopqurtuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890 Ha HaHa \\bHa (using word boundary) abhishekpathak.com \\w+\\.com 321-555-4321 123.555.1234 \\b{3}[-.]\\b\\{3}[-.]\\b{4} Mr. Schafer Mr Smith Ms David Mrs. Robinson Mr. T M(r\\|s\\|rs).?\\s[A-Z]\\w* cat mat pat bat [^b]at CoreyMSchafer@gmail.com corey.schafer@university.edu corey-321-schafer@my-work.net [a-zA-Z0-9.-]+@[a-zA-Z-]+.(com\\|edu\\|net) All kind of email addresses [a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+ ```python raw string: print(\"\\tTab\"): ____Tab ; print(r\"\\tTab\"): \\tTab \u00b6 import re search_in_text = \"\"\" abcdefghijklmnopqurtuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890 \"\"\" pattern = re.compile(r'regular_expression_here') searches = pattern.finditer(search_in_text) for search in searches: print(search)```","title":"RE (Regular Expression) Module"},{"location":"Python/_py_modules/regular_expression/#re-regular-expression-module","text":"RE Description . Any character except new line \\d Digit (0 - 9) \\D Not a Digit \\w Word character (a-z, A-Z, 0-9, _) \\W Not a word character \\s Whitespace (space, tab, newline) \\S Not whitespace \\b Word boundary #\\bha means space or nothing before 'ha' \\B Not a word boundary ^ Beginning of a string $ End of a string [] Matches characters in bracket, no need for \\ inside in case of escape characters, [1-7] == [1234567] != [-17] [^ ] Matches characters not in bracket, [^a-c] == all letters except a,b,c | Either Or () Group Quantifiers * 0 or more + 1 or more ? 0 or 1 {3} Exact number {3, 4} Range of numbers (minimum, maximum) Meta Characters .[{()\\^$?*+ need to be escaped by \\ (back slash) Text Regular Expression abcdefghijklmnopqurtuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890 Ha HaHa \\bHa (using word boundary) abhishekpathak.com \\w+\\.com 321-555-4321 123.555.1234 \\b{3}[-.]\\b\\{3}[-.]\\b{4} Mr. Schafer Mr Smith Ms David Mrs. Robinson Mr. T M(r\\|s\\|rs).?\\s[A-Z]\\w* cat mat pat bat [^b]at CoreyMSchafer@gmail.com corey.schafer@university.edu corey-321-schafer@my-work.net [a-zA-Z0-9.-]+@[a-zA-Z-]+.(com\\|edu\\|net) All kind of email addresses [a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+ ```python","title":"RE (Regular Expression) Module"},{"location":"Python/_py_modules/regular_expression/#raw-string-printttab-____tab-printrttab-ttab","text":"import re search_in_text = \"\"\" abcdefghijklmnopqurtuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890 \"\"\" pattern = re.compile(r'regular_expression_here') searches = pattern.finditer(search_in_text) for search in searches: print(search)```","title":"raw string: print(\"\\tTab\"): ____Tab ; print(r\"\\tTab\"): \\tTab"},{"location":"Python/_py_modules/requests/","text":"REQUESTS Module \u00b6 Import requests payload = { 'key1' : 'value1' , 'key2' : [ 'value2' , 'value3' ]} headers = { 'user-agent' : 'my-app/0.0.1' } r = requests . get ( 'https://api.github.com/events' , params = payload , headers = headers , stream = False , cookies = cookies , allow_redirects = True , timeout = 0.001 ) r = requests . post ( 'https://httpbin.org/post' , data = payload , json = payload ) r = requests . put ( 'https://httpbin.org/put' , data = payload ) r = requests . delete ( 'https://httpbin.org/delete' ) r = requests . head ( 'https://httpbin.org/get' ) r = requests . options ( 'https://httpbin.org/get' ) # json data will be encoded as json automatically, # it will be ignored if either data or file parameter is passed Basic \u00b6 Code Description r.url fully encoded url, i.e. url after encoding of parameters sent with url r.text content of server's response (after decoding) r.encoding returns the automatically guessed encoding of the response by requests library r.encoding = 'ISO-8859-1' change encoding r.content returns response body as bytes (un-decoded) r.status_code status code of response (200, 404 etc) r.raw r.raw().read(10) # read 10 bytes raw socket response from the server, If you want to do this, make sure you set stream=True in parameter body of request r.headers response headers r.cookies['example_cookie_name'] returns cookies sent in response r.history track redirection, we can block resirections by allow_redirects=False parameter in request r.raise_for_status() will raise an HTTPError if the HTTP request returns an unsuccessful status code r.json() returns response decoded as a JSON","title":"REQUESTS Module"},{"location":"Python/_py_modules/requests/#requests-module","text":"Import requests payload = { 'key1' : 'value1' , 'key2' : [ 'value2' , 'value3' ]} headers = { 'user-agent' : 'my-app/0.0.1' } r = requests . get ( 'https://api.github.com/events' , params = payload , headers = headers , stream = False , cookies = cookies , allow_redirects = True , timeout = 0.001 ) r = requests . post ( 'https://httpbin.org/post' , data = payload , json = payload ) r = requests . put ( 'https://httpbin.org/put' , data = payload ) r = requests . delete ( 'https://httpbin.org/delete' ) r = requests . head ( 'https://httpbin.org/get' ) r = requests . options ( 'https://httpbin.org/get' ) # json data will be encoded as json automatically, # it will be ignored if either data or file parameter is passed","title":"REQUESTS Module"},{"location":"Python/_py_modules/requests/#basic","text":"Code Description r.url fully encoded url, i.e. url after encoding of parameters sent with url r.text content of server's response (after decoding) r.encoding returns the automatically guessed encoding of the response by requests library r.encoding = 'ISO-8859-1' change encoding r.content returns response body as bytes (un-decoded) r.status_code status code of response (200, 404 etc) r.raw r.raw().read(10) # read 10 bytes raw socket response from the server, If you want to do this, make sure you set stream=True in parameter body of request r.headers response headers r.cookies['example_cookie_name'] returns cookies sent in response r.history track redirection, we can block resirections by allow_redirects=False parameter in request r.raise_for_status() will raise an HTTPError if the HTTP request returns an unsuccessful status code r.json() returns response decoded as a JSON","title":"Basic"},{"location":"Python/_py_modules/sqlite3/","text":"SQLITE3 Module \u00b6","title":"SQLITE3 Module"},{"location":"Python/_py_modules/sqlite3/#sqlite3-module","text":"","title":"SQLITE3 Module"},{"location":"Python/_py_modules/statistics/","text":"Statistics Module \u00b6 Import statistics as st Command Description st.mean(my_list) st.harmonic_mean(my_list) st.median(my_list) st-median_low(mylist) st.median_high(mylist) st.mode(mylist) st.pstdev(mylist, mu=None) Population standard deviation, mu = mean, if mu = none, it calculates mean itself st.pvariance(mylist, mu=none) st.stdev(data, xbar=None) If full population is used, use pstdev() method st.variance(data, xbar=None) Returns Variance of the data","title":"Statistics Module"},{"location":"Python/_py_modules/statistics/#statistics-module","text":"Import statistics as st Command Description st.mean(my_list) st.harmonic_mean(my_list) st.median(my_list) st-median_low(mylist) st.median_high(mylist) st.mode(mylist) st.pstdev(mylist, mu=None) Population standard deviation, mu = mean, if mu = none, it calculates mean itself st.pvariance(mylist, mu=none) st.stdev(data, xbar=None) If full population is used, use pstdev() method st.variance(data, xbar=None) Returns Variance of the data","title":"Statistics Module"},{"location":"Python/_py_modules/subprocess/","text":"SUBPROCESS Module \u00b6","title":"SUBPROCESS Module"},{"location":"Python/_py_modules/subprocess/#subprocess-module","text":"","title":"SUBPROCESS Module"},{"location":"Python/_py_modules/sys/","text":"SYS Module \u00b6 Code Description __breakpointhook__ __displayhook__ __doc__ __excepthook__ __interactivehook__ __loader__ __name__ __package__ __spec__ __stderr__ __stdin__ __stdout__ __unraisablehook__ _base_executable _clear_type_cache _current_frames _debugmallocstats _enablelegacywindowsfsencoding _framework _getframe _git _home _xoptions addaudithook api_version argv audit base_exec_prefix base_prefix breakpointhook builtin_module_names byteorder call_tracing callstats copyright displayhook dllhandle dont_write_bytecode exc_info excepthook exec_prefix executable exit flags float_info float_repr_style get_asyncgen_hooks get_coroutine_origin_tracking_depth getallocatedblocks getcheckinterval getdefaultencoding getfilesystemencodeerrors getfilesystemencoding getprofile getrecursionlimit getrefcount getsizeof getswitchinterval gettrace getwindowsversion hash_info hexversion implementation int_info intern is_finalizing maxsize maxunicode meta_path modules path path_hooks path_importer_cache platform prefix pycache_prefix set_asyncgen_hooks set_coroutine_origin_tracking_depth setcheckinterval setprofile setrecursionlimit setswitchinterval settrace stderr stdin stdout thread_info unraisablehook version version_info warnoptions winver","title":"SYS Module"},{"location":"Python/_py_modules/sys/#sys-module","text":"Code Description __breakpointhook__ __displayhook__ __doc__ __excepthook__ __interactivehook__ __loader__ __name__ __package__ __spec__ __stderr__ __stdin__ __stdout__ __unraisablehook__ _base_executable _clear_type_cache _current_frames _debugmallocstats _enablelegacywindowsfsencoding _framework _getframe _git _home _xoptions addaudithook api_version argv audit base_exec_prefix base_prefix breakpointhook builtin_module_names byteorder call_tracing callstats copyright displayhook dllhandle dont_write_bytecode exc_info excepthook exec_prefix executable exit flags float_info float_repr_style get_asyncgen_hooks get_coroutine_origin_tracking_depth getallocatedblocks getcheckinterval getdefaultencoding getfilesystemencodeerrors getfilesystemencoding getprofile getrecursionlimit getrefcount getsizeof getswitchinterval gettrace getwindowsversion hash_info hexversion implementation int_info intern is_finalizing maxsize maxunicode meta_path modules path path_hooks path_importer_cache platform prefix pycache_prefix set_asyncgen_hooks set_coroutine_origin_tracking_depth setcheckinterval setprofile setrecursionlimit setswitchinterval settrace stderr stdin stdout thread_info unraisablehook version version_info warnoptions winver","title":"SYS Module"},{"location":"Python/_py_modules/tkinter/","text":"from tkinter import * from tkinter.ttk import * import tkinter.filedialog def submit (): entered_text = entry . get () # get text from entry box out . delete ( 0.0 , END ) # 0.0 (from first line and char); END (upto the end) out . insert ( END , entered_text ) # open file_selector window def open_file (): one_file = tkinter . filedialog . askopenfilename ( filetypes = [( 'CSV Files' , '*.csv' )]) # to make multiple files selectable use below files = askopenfilenames ( initialdir = 'c:/' , title = \"Select multiple files\" , filetypes = [( 'Zip Files' , '*.zip' )]) def close_window (): window . destroy () exit () ## MAIN WINDOW window = Tk () window . title ( \"Binary check automation\" ) window . configure ( background = \"black\" ) window . geometry ( \"400x600\" ) window . resizable ( 0 , 0 ) # Element's code window . mainloop () Elements and codes |Element| Code| |:---|:---| |Text Label| `Label(window, text=\"hello there!\", bg=\"black\", fg=\"white\", font=(\"Fira code\", 18, \"bold\"))`| |Entry Box Single line input box|`Entry(window, width=20, bg=\"white\")`| |Text Box Multiple line input box|`Text(window, width=50, height=6, wrap=WORD, background=\"white\")`| |Button|`Button(window, text=\"SUBMIT\", bg=\"#858585\", width=6, command=submit, style='G.TButton)`| |Photo Image|`PhotoImage(file=\"testimg.gif\")` ```Label(window, image=photo, bg=\"black\").grid(row=0, column=0, sticky=W)```| |Label Frame|`LabelFrame(window, text=\"Square frame with text on top left corner inside border\")`| How to: \u00b6 How to show messagebox? from tkinter import messagebox messagebox . showerror ( \"message\" ) messagebox . showinfo ( \"message\" ) messagebox . showwarning ( \"message\" ) How to show menu? menu = Menu ( window ) # Main menu object window . config ( menu = menu ) m1 = Menu ( menu , tearoff = 0 ) m1 . add_command ( label = 'menu 1.1' , command = menu_click_command ) m2 = Menu ( menu , tearoff = 0 ) m2 . add_command ( label = 'menu 2.1' ) m3 = Menu ( menu , tearoff = 0 ) m3 . add_command ( label = 'menu 2.2' ) # menu_1 and menu_2 will be two main menu items menu . add_cascade ( label = 'menu_1' , menu = m1 ) menu . add_cascade ( label = 'menu_2' , menu = m2 ) menu . add_cascade ( label = 'menu_2' , menu = m3 ) How to make table and add data, add scrollbar? trv = Treeview ( window , columns = ( 1 , 2 , 3 ), show = \"headings\" ) trv . pack ( fill = BOTH , expand = \"yes\" , side = LEFT ) trv . column ( '#1' , width = 150 , stretch = NO ) trv . column ( '#3' , width = 350 , stretch = NO ) trv . heading ( 1 , text = \"Column 1 Name\" ) trv . heading ( 2 , text = \"Column 2 Name\" ) trv . heading ( 3 , text = \"Column 3 Name\" ) trv . tag_configure ( 'green' , background = '#81C784' ) trv . tag_configure ( 'red' , background = '#EF5350' ) # what to happen when double clicked on any row trv . bind ( \"<Double-1>\" , lambda x : tree_double_click ( trv )) y_scroll = Scrollbar ( window , orient = VERTICAL ) y_scroll . pack ( side = RIGHT , fill = 'y' ) y_scroll . config ( command = trv . yview ) trv . config ( yscrollcommand = y_scroll . set ) # Add data into treeview # this row will show green background trv . insert ( \"\" , END , values = ( 'col_1_data' , 'col_2_data' , 'col_3_data' ), tags = ( 'green' ,)) # this row will show red background trv . insert ( \"\" , END , values = ( 'col_1_data' , 'col_2_data' , 'col_3_data' ), tags = ( 'red' ,))","title":"TKINTER Module"},{"location":"Python/_py_modules/tkinter/#how-to","text":"How to show messagebox? from tkinter import messagebox messagebox . showerror ( \"message\" ) messagebox . showinfo ( \"message\" ) messagebox . showwarning ( \"message\" ) How to show menu? menu = Menu ( window ) # Main menu object window . config ( menu = menu ) m1 = Menu ( menu , tearoff = 0 ) m1 . add_command ( label = 'menu 1.1' , command = menu_click_command ) m2 = Menu ( menu , tearoff = 0 ) m2 . add_command ( label = 'menu 2.1' ) m3 = Menu ( menu , tearoff = 0 ) m3 . add_command ( label = 'menu 2.2' ) # menu_1 and menu_2 will be two main menu items menu . add_cascade ( label = 'menu_1' , menu = m1 ) menu . add_cascade ( label = 'menu_2' , menu = m2 ) menu . add_cascade ( label = 'menu_2' , menu = m3 ) How to make table and add data, add scrollbar? trv = Treeview ( window , columns = ( 1 , 2 , 3 ), show = \"headings\" ) trv . pack ( fill = BOTH , expand = \"yes\" , side = LEFT ) trv . column ( '#1' , width = 150 , stretch = NO ) trv . column ( '#3' , width = 350 , stretch = NO ) trv . heading ( 1 , text = \"Column 1 Name\" ) trv . heading ( 2 , text = \"Column 2 Name\" ) trv . heading ( 3 , text = \"Column 3 Name\" ) trv . tag_configure ( 'green' , background = '#81C784' ) trv . tag_configure ( 'red' , background = '#EF5350' ) # what to happen when double clicked on any row trv . bind ( \"<Double-1>\" , lambda x : tree_double_click ( trv )) y_scroll = Scrollbar ( window , orient = VERTICAL ) y_scroll . pack ( side = RIGHT , fill = 'y' ) y_scroll . config ( command = trv . yview ) trv . config ( yscrollcommand = y_scroll . set ) # Add data into treeview # this row will show green background trv . insert ( \"\" , END , values = ( 'col_1_data' , 'col_2_data' , 'col_3_data' ), tags = ( 'green' ,)) # this row will show red background trv . insert ( \"\" , END , values = ( 'col_1_data' , 'col_2_data' , 'col_3_data' ), tags = ( 'red' ,))","title":"How to:"},{"location":"Python/_py_modules/venv/","text":"Venv Module \u00b6 Create new Virtual environment: $ Python -m venv project_name Create a virtual environment with access to all the global installed libraries. \u26a0 Removing a library here will remove the library globally too, but installing new one and then removing new ones won't affect the global list $ Python -m venv my_project --system-site-packages Activate newly created virtual environment: $ project_name\\Scripts\\activate.bat To save all the installed installed libraries into a requirement.txt file: $ Pip freeze > requirements.txt To install all libraries listed in requirements.txt in new venv project: $ Pip install -r requirements.txt # filename can be anything To deactivate environment: $ Deactivate # it will only deactivate virtual environment, it will not delete the project directory and files created. Note: It is best practice to make 'venv' directory in main project directory and never to put any project file or folder in venv directory, virtual environments must be considered as a use and throw elements. Also we should never commit 'venv' directory to source control also.","title":"Venv Module"},{"location":"Python/_py_modules/venv/#venv-module","text":"Create new Virtual environment: $ Python -m venv project_name Create a virtual environment with access to all the global installed libraries. \u26a0 Removing a library here will remove the library globally too, but installing new one and then removing new ones won't affect the global list $ Python -m venv my_project --system-site-packages Activate newly created virtual environment: $ project_name\\Scripts\\activate.bat To save all the installed installed libraries into a requirement.txt file: $ Pip freeze > requirements.txt To install all libraries listed in requirements.txt in new venv project: $ Pip install -r requirements.txt # filename can be anything To deactivate environment: $ Deactivate # it will only deactivate virtual environment, it will not delete the project directory and files created. Note: It is best practice to make 'venv' directory in main project directory and never to put any project file or folder in venv directory, virtual environments must be considered as a use and throw elements. Also we should never commit 'venv' directory to source control also.","title":"Venv Module"},{"location":"Python/py%20basics/","text":"Python Basics \u00b6 Common Methods and Description \u00b6 .tg {border-collapse:collapse;border-spacing:0;} .tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;} .tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;} .tg .tg-34fe{background-color:#404040;border-color:inherit;text-align:center;vertical-align:top} .tg .tg-zlqz{font-weight:bold;background-color:#404040;border-color:inherit;text-align:center;vertical-align:top} .tg .tg-5nj1{font-family:\"Lucida Console\", Monaco, monospace !important;;border-color:inherit;text-align:left;vertical-align:top} .tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top} Method Description type(obj) Returns class type of argument id(obj) Retuens unique id associated with object dir(class / module) Returns all methods available sys.path List of locations where python looks for modules to import abc.__doc__ Print class or method documentation def function(): \"\"\"documentation\"\"\" Documentation about method to show in __doc__ method map(lambda t: t*2, mylist) Map each item of mylist to lambda function FALSE, None, 0, \" \", ( ), [ ], { } All evelutes to false len(iterable) Returns length of iterable object def function(*args, **kwargs): print(args) print(kwargs) function('math', 'art', name='dev', age=20) args = positional arguments => ('math', 'art') kwargs = keyword arguments => {'name': 'dev', 'age': 20} python -m http.server # localhost:8000 python -m http.server 7800 # localhost:7800 Run a local test server python -m pydoc -p 1234 # localhost:1234 Open python documentation on local server import timeit timeit.timeit(my_func()) Measure execution time __bool__(): return False __len__(): return 0 Only cases when object is considered false if its defines any of these methods, else its always considered true Duck Typing \u00b6 Duck typing is a concept that says that the \u201ctype\u201d of the object is a matter of concern only at runtime and you don\u2019t need to to explicitly mention the type of the object before you perform any kind of operation on that object. The following example can help in understanding this concept - def calc ( a , b ): return a + b Now, Python says that for the above function I don\u2019t need to be concerned about the \u201ctype\u201d of the objects \u2018a\u2019 & \u2018b\u2019 and that the type will be taken care of during runtime as long as the objects support the \u2018+\u2019 . So, keeping this in mind the above function will work for any \u201ctype\u201d of object which supports the operator + i.e. it will return valid values for a string, list or Integer.","title":"Python Basics"},{"location":"Python/py%20basics/#python-basics","text":"","title":"Python Basics"},{"location":"Python/py%20basics/#common-methods-and-description","text":".tg {border-collapse:collapse;border-spacing:0;} .tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;} .tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;} .tg .tg-34fe{background-color:#404040;border-color:inherit;text-align:center;vertical-align:top} .tg .tg-zlqz{font-weight:bold;background-color:#404040;border-color:inherit;text-align:center;vertical-align:top} .tg .tg-5nj1{font-family:\"Lucida Console\", Monaco, monospace !important;;border-color:inherit;text-align:left;vertical-align:top} .tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top} Method Description type(obj) Returns class type of argument id(obj) Retuens unique id associated with object dir(class / module) Returns all methods available sys.path List of locations where python looks for modules to import abc.__doc__ Print class or method documentation def function(): \"\"\"documentation\"\"\" Documentation about method to show in __doc__ method map(lambda t: t*2, mylist) Map each item of mylist to lambda function FALSE, None, 0, \" \", ( ), [ ], { } All evelutes to false len(iterable) Returns length of iterable object def function(*args, **kwargs): print(args) print(kwargs) function('math', 'art', name='dev', age=20) args = positional arguments => ('math', 'art') kwargs = keyword arguments => {'name': 'dev', 'age': 20} python -m http.server # localhost:8000 python -m http.server 7800 # localhost:7800 Run a local test server python -m pydoc -p 1234 # localhost:1234 Open python documentation on local server import timeit timeit.timeit(my_func()) Measure execution time __bool__(): return False __len__(): return 0 Only cases when object is considered false if its defines any of these methods, else its always considered true","title":"Common Methods and Description"},{"location":"Python/py%20basics/#duck-typing","text":"Duck typing is a concept that says that the \u201ctype\u201d of the object is a matter of concern only at runtime and you don\u2019t need to to explicitly mention the type of the object before you perform any kind of operation on that object. The following example can help in understanding this concept - def calc ( a , b ): return a + b Now, Python says that for the above function I don\u2019t need to be concerned about the \u201ctype\u201d of the objects \u2018a\u2019 & \u2018b\u2019 and that the type will be taken care of during runtime as long as the objects support the \u2018+\u2019 . So, keeping this in mind the above function will work for any \u201ctype\u201d of object which supports the operator + i.e. it will return valid values for a string, list or Integer.","title":"Duck Typing"},{"location":"Python/py%20basics/context_manager/","text":"with open ( 'sample.txt' , 'w' ) as f : f . write ( 'Testing' ) What is happening behind (using class): \u00b6 class Open_file (): def __init__ ( self , filename , mode ): self . filename = filename self . mode = mode def __enter__ ( self ): self . file = open ( self . filename , self . mode ) return self . file def __exit__ ( self , exc_type , exc_val , traceback ): self . file . close () What is happening behind (using method): \u00b6 from contextlib import contextmanager @contextmanager def open_file ( file , mode ): try : f = open ( file , mode ) yield f finally : f . close () In a similar way (using method) we can create our own context managers so that some specific task will execute for sure even if we forget to execute that explicitly.","title":"Context Manager"},{"location":"Python/py%20basics/context_manager/#what-is-happening-behind-using-class","text":"class Open_file (): def __init__ ( self , filename , mode ): self . filename = filename self . mode = mode def __enter__ ( self ): self . file = open ( self . filename , self . mode ) return self . file def __exit__ ( self , exc_type , exc_val , traceback ): self . file . close ()","title":"What is happening behind (using class):"},{"location":"Python/py%20basics/context_manager/#what-is-happening-behind-using-method","text":"from contextlib import contextmanager @contextmanager def open_file ( file , mode ): try : f = open ( file , mode ) yield f finally : f . close () In a similar way (using method) we can create our own context managers so that some specific task will execute for sure even if we forget to execute that explicitly.","title":"What is happening behind (using method):"},{"location":"Python/py%20basics/dunder/","text":"Ref https://holycoders.com/python-dunder-special-methods/ See the end of page for example Dunder Description __new__(self) return a new object (an instance of that class). It is called before init method. Know More __init__(self) is called when the object is initialized. It is the constructor of a class. __del__(self) for del() function. Called when the object is to be destroyed. Can be used to commit unsaved data or close connections. __repr__(self) for repr() function. It returns a string to print the object. Intended for developers to debug. Must be implemented in any class. __str__(self) for str() function. Return a string to print the object. Intended for users to see a pretty and useful output. If not implemented, repr will be used as a fallback. __bytes__(self) for bytes() function. Return a byte object which is the byte string representation of the object. __format__(self) for format() function. Evaluate formatted string literals like % for percentage format and \u2018b\u2019 for binary. __lt__(self, anotherObj) for < operator. __le__(self, anotherObj) for <= operator. __eq__(self, anotherObj) for == operator. __ne__(self, anotherObj) for != operator. __gt__(self, anotherObj) for > operator. __ge__(self, anotherObj) for >= operator. __hash__(self) for hash(obj) , it should return an integer. obj1 == obj2 should mean hash(obj1) == hash(obj2) __bool__(self) for bool(obj) , if not defined, then __len__ is called and obj is defined as true if __len__ returns non 0 Arithematic \u00b6 Dunder Description __add__(self, y) __sub__(self, y) __mul__(self, y) for +, -, * operation on object. __and__(self, y) __or__(self, y) __xor__(self, y) __neg__(self) obj & y obj | y obj ^ y negation of object __matmul__(self, y) for @ operator (numpy matrix multiplication). __truediv__(self, y) for simple / division operation on object. __floordiv__(self, y) for // floor division operation on object. __mod__(self, y) obj % anotherobj __pow__(self, y) obj ** y __lshift__(self, y) obj << y __abs__(self) make support for abs() function. Return absolute value. __round__(self, nDigits) for round() function. Round off float type to 2 digits and return it. __int__(self) __float__(self) __complex__(self) support for int(), float() and complex() methods on object __trunc__(self) for trunc() function of math module. Returns the real value of the object. __ceil__(self) __floor__(self) for ceil() and floor() function on object. Containor type \u00b6 Dunder Description __len__(self) for len() function. Returns the total number in any container. __getitem__(self, key) to support indexing. LIke container [index] calls container.__getitem(key)explicitly. __setitem__(self, key, value) makes item mutable (items can be changed by index), like container [index] = otherElement. __delitem__(self, key) for del() function. Delete the value at the index key. __iter__(self) returns an iterator when required that iterates all values in the container. __dir__(self) A sequence must be returned __contains__(self, x) Should returns the output of x in obj class Account : # def __new__(self): # print(\"__new__ called A new account is Created.\") def __init__ ( self , name , balance = 0 ): self . name = name self . _balance = balance print ( \"(__init__) Account Created with {} balance\" . format ( self . _balance )) def getBalance ( self ): return self . _balance def __repr__ ( self ): return \"(__repr__) Account( {0} , {1} )\" . format ( self . name , self . _balance ) def __str__ ( self ): return \"(__str__) Account Name = {0} , Account Balance = {1} \" . format ( self . name , self . _balance ) def __lt__ ( self , otherObj ): try : return self . _balance < otherObj . getBalance () except : return \"Cannot Be compared.\" def __del__ ( self ): self . _balance = 0 print ( \"(__del__) Account Deleted\" ) digvijay_ac = Account ( \"Digvijay Singh\" , 500 ) saket_ac = Account ( \"Digvijay Singh\" , 700 ) print ( str ( digvijay_ac )) print ( repr ( digvijay_ac )) print ( digvijay_ac < saket_ac ) OP: \u00b6 (__init__) Account Created with 500 balance (__init__) Account Created with 700 balance (__str__) Account Name = Digvijay Singh, Account Balance = 500 (__repr__) Account(Digvijay Singh, 500) True (__del__) Account Deleted (__del__) Account Deleted","title":"Dunder Methods"},{"location":"Python/py%20basics/dunder/#arithematic","text":"Dunder Description __add__(self, y) __sub__(self, y) __mul__(self, y) for +, -, * operation on object. __and__(self, y) __or__(self, y) __xor__(self, y) __neg__(self) obj & y obj | y obj ^ y negation of object __matmul__(self, y) for @ operator (numpy matrix multiplication). __truediv__(self, y) for simple / division operation on object. __floordiv__(self, y) for // floor division operation on object. __mod__(self, y) obj % anotherobj __pow__(self, y) obj ** y __lshift__(self, y) obj << y __abs__(self) make support for abs() function. Return absolute value. __round__(self, nDigits) for round() function. Round off float type to 2 digits and return it. __int__(self) __float__(self) __complex__(self) support for int(), float() and complex() methods on object __trunc__(self) for trunc() function of math module. Returns the real value of the object. __ceil__(self) __floor__(self) for ceil() and floor() function on object.","title":"Arithematic"},{"location":"Python/py%20basics/dunder/#containor-type","text":"Dunder Description __len__(self) for len() function. Returns the total number in any container. __getitem__(self, key) to support indexing. LIke container [index] calls container.__getitem(key)explicitly. __setitem__(self, key, value) makes item mutable (items can be changed by index), like container [index] = otherElement. __delitem__(self, key) for del() function. Delete the value at the index key. __iter__(self) returns an iterator when required that iterates all values in the container. __dir__(self) A sequence must be returned __contains__(self, x) Should returns the output of x in obj class Account : # def __new__(self): # print(\"__new__ called A new account is Created.\") def __init__ ( self , name , balance = 0 ): self . name = name self . _balance = balance print ( \"(__init__) Account Created with {} balance\" . format ( self . _balance )) def getBalance ( self ): return self . _balance def __repr__ ( self ): return \"(__repr__) Account( {0} , {1} )\" . format ( self . name , self . _balance ) def __str__ ( self ): return \"(__str__) Account Name = {0} , Account Balance = {1} \" . format ( self . name , self . _balance ) def __lt__ ( self , otherObj ): try : return self . _balance < otherObj . getBalance () except : return \"Cannot Be compared.\" def __del__ ( self ): self . _balance = 0 print ( \"(__del__) Account Deleted\" ) digvijay_ac = Account ( \"Digvijay Singh\" , 500 ) saket_ac = Account ( \"Digvijay Singh\" , 700 ) print ( str ( digvijay_ac )) print ( repr ( digvijay_ac )) print ( digvijay_ac < saket_ac )","title":"Containor type"},{"location":"Python/py%20basics/dunder/#op","text":"(__init__) Account Created with 500 balance (__init__) Account Created with 700 balance (__str__) Account Name = Digvijay Singh, Account Balance = 500 (__repr__) Account(Digvijay Singh, 500) True (__del__) Account Deleted (__del__) Account Deleted","title":"OP:"},{"location":"Python/py%20basics/exception_handeling/","text":"try : something raise Exception #throw an exception explicitly except ( FileNotFoundError , OtherError , ... ) as e : print ( e ) except Exception as e : #parent exception print ( e ) else : print ( \"if none of above Exception(s) occured, then this block will run\" ) finally : print ( \"will run, no matter what (exception occurs or not)\" ) Note: The codes inside finally will be executed no matter whether there was an exception or not. If there is a \"return\" or \"exit\" inside the exception blocks, before returning or exiting, the finally codes will still be executed.","title":"Exception Handeling"},{"location":"Python/py%20basics/file_operations/","text":"with open ( 'abc.txt' , 'r' ) as f : f . name f . mode # r (read) f . closed # False f . readable () # true or false f . read ( size = n ) # after n characers seek to next character f . readline ( n ) # return first line or atmost n bytes and moves # seek position to start of second line f . readlines ( n ) # returns a list of lines from the file. # Reads in at most n bytes/characters if specified. f . tell () # current seek position f . seek ( 0 ) # change seek position. 0: start; 1: current; 2:end of the file f . writable () # true or false f . write ( s ) # write string s and returns no of characters written f . writelines ( lines ) # write list of lines # f = open('abc.txt', 'r') # f.close() for line in f : print ( line , end = '' ) # print each line with open ( 'abcd.txt' , 'w' ) as f : # w: overwrite; a: append f . write ( 'text' ) # if we f.write() again in same open block. text will be appended # copy from one file to other with open ( 'abc.txt' , 'r' ) as rf : with open ( 'abcd.txt' , 'w' ) as wf : for line in rf : wf . write ( line ) # make a copy of image file with open ( 'abc.jpg' , 'rb' ) as rf : with open ( 'abcd.jpg' , 'wb' ) as wf : for line in rf : wf . write ( line ) Here is a list of the different modes of opening a file: \u00b6 r Opens a file for reading only. The file pointer is placed at the beginning of the file. This is the default mode. rb Opens a file for reading only in binary format. The file pointer is placed at the beginning of the file. This is the default mode. r+ Opens a file for both reading and writing. The file pointer will be at the beginning of the file. rb+ Opens a file for both reading and writing in binary format. The file pointer will be at the beginning of the file. w Opens a file for writing only. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing. wb Opens a file for writing only in binary format. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing. w+ Opens a file for both writing and reading. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing. wb+ Opens a file for both writing and reading in binary format. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing. a Opens a file for appending. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing. ab Opens a file for appending in binary format. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing. a+ Opens a file for both appending and reading. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing. ab+ Opens a file for both appending and reading in binary format. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.","title":"Working with Files (File IO)"},{"location":"Python/py%20basics/file_operations/#here-is-a-list-of-the-different-modes-of-opening-a-file","text":"r Opens a file for reading only. The file pointer is placed at the beginning of the file. This is the default mode. rb Opens a file for reading only in binary format. The file pointer is placed at the beginning of the file. This is the default mode. r+ Opens a file for both reading and writing. The file pointer will be at the beginning of the file. rb+ Opens a file for both reading and writing in binary format. The file pointer will be at the beginning of the file. w Opens a file for writing only. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing. wb Opens a file for writing only in binary format. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing. w+ Opens a file for both writing and reading. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing. wb+ Opens a file for both writing and reading in binary format. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing. a Opens a file for appending. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing. ab Opens a file for appending in binary format. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing. a+ Opens a file for both appending and reading. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing. ab+ Opens a file for both appending and reading in binary format. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.","title":"Here is a list of the different modes of opening a file:"},{"location":"Python/py%20basics/inbuilt_functions/","text":"Code Description abs() Returns absolute value abs(5) : 5 abs(1.500) : 1.5 abs(3+4j) : 5.0 (magnitude) all(iterable) Returns true if all items in iterable are true (or iterable is empty) all([1, 'hey', [1]]) : True all(0), all('') : False any(iterable) Returns true if any element of iterable is true bin(integer) Returns binary value of given integer chr(i) Returns character whose unicode value is 'i' chr(97) : a chr(8364) : \u20ac delattr(object, name) deletes the 'name' attribute from object's implementation dir() \"if no argument is passed: returns attributes/names in current scope if argument is passed: returns attribute of object passed calls __dir__() method if defined divmod(a, b) Returns (a // b, a % b) enumerate(iterable, start=0) seasons = ['Spring', 'Summer', 'Fall', 'Winter'] list(enumerate(seasons, start=1)) OP: [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')] filter(function, iterable) Returns an iterator from those elements of iterable for which function returns true. If function is None, the identity function is assumed, that is, all elements of iterable that are false are removed. getattr(object, name[, default]) getattr(x, 'foobar') will return the value of x.foobar. If the named attribute does not exist, default is returned if provided, otherwise AttributeError is raised hash(object) Returns hash value of object, or retruns output of __hash__() if class defined it help(object) buit-in help system about given object, if no argument is passed then interactive help system starts in the console hex(x) Convert an integer number to a lowercase hexadecimal string prefixed with \u201c0x\u201d. If x is not a Python int object, it has to define an __index__() method that returns an integer. id(object) Returns the unique identity of an object input(prompt_string) to take user input via console, prompt_string will be printed if provided isinstance(object, classinfo) returns true if object is an instance of classinfo. Classinfo can be a tuple of classes. issubclass(class, classinfo) Returns true if class is a subclass of classinfo map(function, iterable, ...) Return an iterator that applies function to every item of iterable, yielding the results.for multiple iterables, it applies them all to the function parallally, the iterator stops when the shortest iterable is exhausted. oct(num) Convert an integer number to an octal string prefixed with \u201c0o\u201d. ord(c) Returns unicode point integer of c pow(base, exp[, mod]) Rerurns (base ^ exp) % mod print(*objects, sep=' ', end='\\n', file=sys.stdout, flush=False) print function with all default parameters round(number[, ndigits]) Return number rounded to ndigits precision after the decimal point. If ndigits is omitted or is None, it returns the nearest integer to its input. sorted(iterable, *, key=None, reverse=False) Returns sorted iterable, key is a function and if provided it first maps iterable to that function and then sorts the iterable zip(*iterables) Returns an iterator of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables. The iterator stops when the shortest input iterable is exhausted.","title":"Inbuilt Functions"},{"location":"Python/py%20basics/learning_path/","text":"Python Learning Path \u00b6 Basic \u00b6 Variables Operators Control Flow (If / Else) Loops and Iterables Basic Data Structures (List, Dictionary, Set, Tuple) Functions Mutable vs Immutable Common Methods File IO Intermediate \u00b6 Object Oriented Programming Data Structures Comprehensions Lambda Functions Map, Filter Collections args & *kwargs Dunder Methods Environments Modules Decorators Generators Advance \u00b6 Context Managers Metaclasses Async IO Threading Testing Packages Cython Expert (More you cover, better you become) \u00b6 Advance Python Web Framework like Django, Flask ORM (Object Relational Mapper) libraries # Libraries in a Object oriented language to manipulate database instead of use of SQL etc like (SQLAlchemy, Django ORM) Data Science and Machine Learning basics Able to integrate multiple data sources and databases into one system Understanding of the threading limitations of Python Multi-process architecture (MVC, MVT) Server-side templating languages like Jinja 2, Mako, etc Basic understanding of HTML, CSS, JavaScript Understanding of accessibility and security compliance (depending on the specific project) environments Understanding of fundamental design principles behind a scalable application Familiarity with event-driven programming in Python Understanding of the differences between multiple delivery platforms, such as mobile vs desktop, and optimizing output to match the specific platform Able to create database schemas that represent and support business processes Strong unit test and debugging skills Proficient understanding of code versioning tools (such as Git, Mercurial or SVN)","title":"Python Learning Path"},{"location":"Python/py%20basics/learning_path/#python-learning-path","text":"","title":"Python Learning Path"},{"location":"Python/py%20basics/learning_path/#basic","text":"Variables Operators Control Flow (If / Else) Loops and Iterables Basic Data Structures (List, Dictionary, Set, Tuple) Functions Mutable vs Immutable Common Methods File IO","title":"Basic"},{"location":"Python/py%20basics/learning_path/#intermediate","text":"Object Oriented Programming Data Structures Comprehensions Lambda Functions Map, Filter Collections args & *kwargs Dunder Methods Environments Modules Decorators Generators","title":"Intermediate"},{"location":"Python/py%20basics/learning_path/#advance","text":"Context Managers Metaclasses Async IO Threading Testing Packages Cython","title":"Advance"},{"location":"Python/py%20basics/learning_path/#expert-more-you-cover-better-you-become","text":"Advance Python Web Framework like Django, Flask ORM (Object Relational Mapper) libraries # Libraries in a Object oriented language to manipulate database instead of use of SQL etc like (SQLAlchemy, Django ORM) Data Science and Machine Learning basics Able to integrate multiple data sources and databases into one system Understanding of the threading limitations of Python Multi-process architecture (MVC, MVT) Server-side templating languages like Jinja 2, Mako, etc Basic understanding of HTML, CSS, JavaScript Understanding of accessibility and security compliance (depending on the specific project) environments Understanding of fundamental design principles behind a scalable application Familiarity with event-driven programming in Python Understanding of the differences between multiple delivery platforms, such as mobile vs desktop, and optimizing output to match the specific platform Able to create database schemas that represent and support business processes Strong unit test and debugging skills Proficient understanding of code versioning tools (such as Git, Mercurial or SVN)","title":"Expert (More you cover, better you become)"},{"location":"Python/py%20basics/list_dict/","text":"List and Dictionary \u00b6 List \u00b6 Command Description mylist.append('x') Add single item at last of list (changes original list) mylist.extend(list2) Append whole list at last of list (changes original list) mylist.insert(pos, elem) Insert elem at pos of list1 mylist.remove(elem) Removes first found elem from list1; gives error if not found mylist.index(elem) Returns index of elem mylist.index(elem, i, j) Searches and returns index of elem from mylist[i: j] mylist.pop(index) Removes elem at position index, else removes last item if index not given mylist.count(elem) Returns count of elem in the list mylist.sort(key, reverse=True/False) Key is optional user defined function new_list = sorted(mylist, reverse=False, key=method_name) unlike sort method, it returns a new mylist2 = mylist1.copy() Copy list1 to list2 mylist.clear() same as del mylist[:] mylist.reverse() reverse all items of mylist filter(method, mylist) Returns iterable for each item of list1 for which 'method' returns true zip(mylist, mylist2) Zip both lists upto shorter list max(mylist) Returns max valued item of mylist min(mylist) Returns min valued item of the list any(mylist) True if any one of the list item is true; in case of dict, it considers keys only all(mylist) True if any all of the list items are true; in case of dict, it considers keys only enumerate(mylist, start) mylist = [1, 2, 55, 52, 23] for key, val in enumerate(mylist, 5): print(key, val) 5 1 6 2 7 55 8 52 9 23 Dictionary \u00b6 Command Description dict.fromkeys(mylist) New dictionary with 'list_items: None' key value pair mydict.get(key, value2) Return value of given key, and if key not found, returns value2 mydict.popitem() Returns and remove arbitrary key: value pair mydict.pop(key) Remove key: value mydict.keys() List of all keys of mydict mydict.values() List of all values of mydict mydict.update(k2=v2, k3=v3..) Updating dictionary, if key present update value else add new key:value pair new_dict = sorted(mydict) Sorted by keys","title":"List and Dictionary"},{"location":"Python/py%20basics/list_dict/#list-and-dictionary","text":"","title":"List and Dictionary"},{"location":"Python/py%20basics/list_dict/#list","text":"Command Description mylist.append('x') Add single item at last of list (changes original list) mylist.extend(list2) Append whole list at last of list (changes original list) mylist.insert(pos, elem) Insert elem at pos of list1 mylist.remove(elem) Removes first found elem from list1; gives error if not found mylist.index(elem) Returns index of elem mylist.index(elem, i, j) Searches and returns index of elem from mylist[i: j] mylist.pop(index) Removes elem at position index, else removes last item if index not given mylist.count(elem) Returns count of elem in the list mylist.sort(key, reverse=True/False) Key is optional user defined function new_list = sorted(mylist, reverse=False, key=method_name) unlike sort method, it returns a new mylist2 = mylist1.copy() Copy list1 to list2 mylist.clear() same as del mylist[:] mylist.reverse() reverse all items of mylist filter(method, mylist) Returns iterable for each item of list1 for which 'method' returns true zip(mylist, mylist2) Zip both lists upto shorter list max(mylist) Returns max valued item of mylist min(mylist) Returns min valued item of the list any(mylist) True if any one of the list item is true; in case of dict, it considers keys only all(mylist) True if any all of the list items are true; in case of dict, it considers keys only enumerate(mylist, start) mylist = [1, 2, 55, 52, 23] for key, val in enumerate(mylist, 5): print(key, val) 5 1 6 2 7 55 8 52 9 23","title":"List"},{"location":"Python/py%20basics/list_dict/#dictionary","text":"Command Description dict.fromkeys(mylist) New dictionary with 'list_items: None' key value pair mydict.get(key, value2) Return value of given key, and if key not found, returns value2 mydict.popitem() Returns and remove arbitrary key: value pair mydict.pop(key) Remove key: value mydict.keys() List of all keys of mydict mydict.values() List of all values of mydict mydict.update(k2=v2, k3=v3..) Updating dictionary, if key present update value else add new key:value pair new_dict = sorted(mydict) Sorted by keys","title":"Dictionary"},{"location":"Python/py%20basics/projects/","text":"Python Project Ideas \u00b6 Basic (All details coming soon!) Number guess game Hangman Console based GUI Based Simple GUI calculator Login system Desktop GUI Web app based Files sorting into folders script (automated for downloads folder) moving all image files into image folder, videos, zip etc MNIST based image recognition Intermediate \u00b6 Drawpad in tkinter (like MS paint, draw using mouse and save into image file) Flappy Bird game Snake game Chat Bot (like weather, stock price, youtube video etc) Expanse Tracker To-Do List (GUI / Web-App) Custom API Advance \u00b6 A* path finding visualization Tetris game Sudo game with auto solver Live face detection sub script to hide specified folders if authorized person is not in front of PC Live object detection (Other image recognition projects) More complex 2-D games (pygame, unity)","title":"Python Project Ideas"},{"location":"Python/py%20basics/projects/#python-project-ideas","text":"","title":"Python Project Ideas"},{"location":"Python/py%20basics/projects/#intermediate","text":"Drawpad in tkinter (like MS paint, draw using mouse and save into image file) Flappy Bird game Snake game Chat Bot (like weather, stock price, youtube video etc) Expanse Tracker To-Do List (GUI / Web-App) Custom API","title":"Intermediate"},{"location":"Python/py%20basics/projects/#advance","text":"A* path finding visualization Tetris game Sudo game with auto solver Live face detection sub script to hide specified folders if authorized person is not in front of PC Live object detection (Other image recognition projects) More complex 2-D games (pygame, unity)","title":"Advance"},{"location":"Python/py%20basics/string_number/","text":"Strings and Numbers \u00b6 Strings \u00b6 import string as s Command Description s.ascii_letters abc...zABC....Z S.ascii_lowercase abc.....z S.ascii_uppercase ABCD....Z S.digits 0123456789 S.hexdigits 0123456789abcdefABCDEF S.octdigits 01234567 S.punctutaion !\"#$%&'()*+,-./:;<=>?@[\\]^_`{}~ S.whitespace Space, tab, return S.printable 0123456789 abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ !\"#$%&'()*+,-./:;<=>?@[]^_`{}~ mystr = \"Abhishek\" Command Description mystr.capitalize() Abhishek mystr.count(substr, start, end) Count number of substr present in mystr[start: end] mystr.encode(encoding='utf-8') b'abhishek' mystr.find(substr, start, end) mystr.rfind() Returns index of substring if found rfind finds substring from right side of mystr mystr.index('shek') 4; Just like find(), but it gives error if substring not found mystr.islower() True mystr.partition('s') ('abhi', 's', 'hek') mystr.replace(old, new, count) Replces old substring with new upto count number of times mystr.startswith('abhi') True mystr.strip('abc') Strips a, b, c from both sides of the string mystr.zfill(width) Fill each side of mystr with 0 to obtain 'width' length mystr.join(mystr2) better than mystr + mystr2 because + make a third new string resulting in a quadratic runtime cost mystr.swapcase() return string after changing cases of each character mystr.title() 'Hello dev'.title() ==> Hello Dev mystr.endswith(('abc', 'xyz', 'pqr')) False mystr. isalpha() isdecimal() isdigit() isidentifier() isnumeric() isspace() istitle() Self explainatory mystr. center(length, fillchar) ljust(length, fillchar) rjust(length, fillchar) lstrip('chars') Fill both sides of string by 'fillchar' upto given length lstrip: The chars argument is a string specifying the set of characters to be removed String Formatting \u00b6 Command Description \"{!r}\".format(mystr) repr(mystr) \"{!s}\".format(mystr) str(mystr) \"{0:d}\".format(42) 42 (decimal) \"{0:x}\".format(42) 2a (hexdecimal) \"{0:o}\".format(42) 52 (octal) \"{0:b}\".format(42) 101010 \"{:,}\".format(1234567890) 1,234,567,890 \"{:.2f}\".format(12.3456) 12.34 (upto two decimal points) Numbers \u00b6 Command Description abs(num) absolute value round(num, upto) rounded up number upto decimals int(num) cast to integer","title":"Strings and Numbers"},{"location":"Python/py%20basics/string_number/#strings-and-numbers","text":"","title":"Strings and Numbers"},{"location":"Python/py%20basics/string_number/#strings","text":"import string as s Command Description s.ascii_letters abc...zABC....Z S.ascii_lowercase abc.....z S.ascii_uppercase ABCD....Z S.digits 0123456789 S.hexdigits 0123456789abcdefABCDEF S.octdigits 01234567 S.punctutaion !\"#$%&'()*+,-./:;<=>?@[\\]^_`{}~ S.whitespace Space, tab, return S.printable 0123456789 abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ !\"#$%&'()*+,-./:;<=>?@[]^_`{}~ mystr = \"Abhishek\" Command Description mystr.capitalize() Abhishek mystr.count(substr, start, end) Count number of substr present in mystr[start: end] mystr.encode(encoding='utf-8') b'abhishek' mystr.find(substr, start, end) mystr.rfind() Returns index of substring if found rfind finds substring from right side of mystr mystr.index('shek') 4; Just like find(), but it gives error if substring not found mystr.islower() True mystr.partition('s') ('abhi', 's', 'hek') mystr.replace(old, new, count) Replces old substring with new upto count number of times mystr.startswith('abhi') True mystr.strip('abc') Strips a, b, c from both sides of the string mystr.zfill(width) Fill each side of mystr with 0 to obtain 'width' length mystr.join(mystr2) better than mystr + mystr2 because + make a third new string resulting in a quadratic runtime cost mystr.swapcase() return string after changing cases of each character mystr.title() 'Hello dev'.title() ==> Hello Dev mystr.endswith(('abc', 'xyz', 'pqr')) False mystr. isalpha() isdecimal() isdigit() isidentifier() isnumeric() isspace() istitle() Self explainatory mystr. center(length, fillchar) ljust(length, fillchar) rjust(length, fillchar) lstrip('chars') Fill both sides of string by 'fillchar' upto given length lstrip: The chars argument is a string specifying the set of characters to be removed","title":"Strings"},{"location":"Python/py%20basics/string_number/#string-formatting","text":"Command Description \"{!r}\".format(mystr) repr(mystr) \"{!s}\".format(mystr) str(mystr) \"{0:d}\".format(42) 42 (decimal) \"{0:x}\".format(42) 2a (hexdecimal) \"{0:o}\".format(42) 52 (octal) \"{0:b}\".format(42) 101010 \"{:,}\".format(1234567890) 1,234,567,890 \"{:.2f}\".format(12.3456) 12.34 (upto two decimal points)","title":"String Formatting"},{"location":"Python/py%20basics/string_number/#numbers","text":"Command Description abs(num) absolute value round(num, upto) rounded up number upto decimals int(num) cast to integer","title":"Numbers"},{"location":"Q%20%26%20A/hr_round/","text":"General HR Round Questions \u00b6 Describe yourself.\ud83e\udd2c Your salary expectations.\ud83e\udd11 Your Strengths and Weaknesses.\ud83c\udfcb\ufe0f\u200d\u2642\ufe0f Why should we hire you.\ud83d\ude44","title":"General HR Round Questions"},{"location":"Q%20%26%20A/hr_round/#general-hr-round-questions","text":"Describe yourself.\ud83e\udd2c Your salary expectations.\ud83e\udd11 Your Strengths and Weaknesses.\ud83c\udfcb\ufe0f\u200d\u2642\ufe0f Why should we hire you.\ud83d\ude44","title":"General HR Round Questions"},{"location":"bonus/adb_commands/","text":"General Commands \u00b6 Commands Description adb tcpip 5555 adb connect device_ip_address adb connect host:port # if port not given then default port is 5555 To connect a device over wifi # connect device via usb and enter first command, after that disconnect device and enter second command in terminal adb kill-server Reset adb host adb start-server Restart adb server and daemon after above command adb forward tcp:6100 tcp:7100 adb forward tcp:6100 local:logd Set up arbitrary port forwarding, which forwards requests on a specific host port to a different port on a device Adb devices -l List of attached devices in detail Adb install [option] path_to_apk Install an app into device Options: -l : forward lock app -r : raplace existing package -t : allow test packages -s : install on sd card -d : allow version code downgrade -g : grant all runtime permissions adb uninstall [-k] package Reamove app, -k option is to keep the data and cache directories adb pull remote local copy data from device to host machine adb push local remote Copy data from host machine to device emulator -avd emulator_name -port 5555 connect a pre-made emulator to port 5555 adb -s device_adb_code command execute command on a specific device if multiple are connected adb -d command # device adb -e command # emulator if device and emulator both are connected adb backup [option] package_name Backup phone apps data into PC Options: 1. -f file_name : if file_name not given then backup.adb 2. -apk / -noapk : backup apk file also, default is -noapk 3. -obb / -noobb : backup obb file or not, -noobb is default 4. -shared / -noshared : backup shared storage or not 5. -all : backup app apps, package_name not required 6. -system / -nosystem : default is -system adb restore file_name restore data from backed up data file adb bugreport path Default filename is bugreport.zip, devices that do not support zipped bug reports print to stdout adb logcat [-help] [-option] [filter-spec] adb reboot [bootloader / recovery / sideload / sideload-auto-reboot] Reboot device in specified mode adb get-serialno Print the adb device serial number string adb shell Start a remote interactive shell in the target device adb shell am [command] Activity Manager Options: 1. start -a intent : Start an activity specified by intent # adb shell am start -a android.intent.action.VIEW 2. startservice [option] intent : start a service specified by an intent 3. force-stop package : force stop everything associated with package 4. kill-all : kill all background processes 5. profile start process file : start profiler on process, write result to file 6. profile stop process : stop profiler on process 7. display-size [reset / w*h] : override display size 8. display-density new_dpi : override display density adb shell dpm command device policy manager adb shell screencap /sdcard/screen.png Take a screenshot of device display adb shell screenrecord [option] /sdcard/demo.mp4 Stop the screen recording by pressing Control + C; otherwise, the recording stops automatically at three minutes or the time limit set by --time-limit Options: --help : Help --size w*h : default is 1280*720 if supported by device --bit-rate rate : in megabits per second (4Mbps -> enter value 4000000) --time-limit time : time limit in seconds. default is 180 --verbose : display log information adb shell dmesg Print kernel debugging message to screen adb shell sqlite3 /path_in_device/file_name.db start sqlite3 command line program Package Manager \u00b6 adb shell pm [command] Commands Description list packages [option] filter Prints all packages, optionally only those whose package name contains the text in filter Options: -f : see their associated files -d : filter to only show disabled packages -e : show enabled packages -s : show system packages -3 : show third party packages -i : see the installer for the packages -u : include uninstalled packages --user uid : user space to query list permission-groups print all known permission groups list permission [option] group Print all known permissions, optionally only those in groups Options: -g : organized by group -f : print all information -s : short summary -d : list dangerous permissions -u : list only the permissions users will see list features Print all features list libraries Libraries supported by current device list users all users on the system path package Path to apk of the given package clear package delete all data associated to package grant package permission Grant a permission to an app revoke package permission Revoke a permission from an app set-install location location Change the default install location Options: 0: auto, let the system decide 1: internal 2: external get-install-location return current default install location create-user user_name Create new user # supported in multi-user devices only remove-user uid Remove user with given user_id and data associated with them get-max-users Remove user with given user_id and data associated with them","title":"ADB (Android Debug Bridge) Commands"},{"location":"bonus/adb_commands/#general-commands","text":"Commands Description adb tcpip 5555 adb connect device_ip_address adb connect host:port # if port not given then default port is 5555 To connect a device over wifi # connect device via usb and enter first command, after that disconnect device and enter second command in terminal adb kill-server Reset adb host adb start-server Restart adb server and daemon after above command adb forward tcp:6100 tcp:7100 adb forward tcp:6100 local:logd Set up arbitrary port forwarding, which forwards requests on a specific host port to a different port on a device Adb devices -l List of attached devices in detail Adb install [option] path_to_apk Install an app into device Options: -l : forward lock app -r : raplace existing package -t : allow test packages -s : install on sd card -d : allow version code downgrade -g : grant all runtime permissions adb uninstall [-k] package Reamove app, -k option is to keep the data and cache directories adb pull remote local copy data from device to host machine adb push local remote Copy data from host machine to device emulator -avd emulator_name -port 5555 connect a pre-made emulator to port 5555 adb -s device_adb_code command execute command on a specific device if multiple are connected adb -d command # device adb -e command # emulator if device and emulator both are connected adb backup [option] package_name Backup phone apps data into PC Options: 1. -f file_name : if file_name not given then backup.adb 2. -apk / -noapk : backup apk file also, default is -noapk 3. -obb / -noobb : backup obb file or not, -noobb is default 4. -shared / -noshared : backup shared storage or not 5. -all : backup app apps, package_name not required 6. -system / -nosystem : default is -system adb restore file_name restore data from backed up data file adb bugreport path Default filename is bugreport.zip, devices that do not support zipped bug reports print to stdout adb logcat [-help] [-option] [filter-spec] adb reboot [bootloader / recovery / sideload / sideload-auto-reboot] Reboot device in specified mode adb get-serialno Print the adb device serial number string adb shell Start a remote interactive shell in the target device adb shell am [command] Activity Manager Options: 1. start -a intent : Start an activity specified by intent # adb shell am start -a android.intent.action.VIEW 2. startservice [option] intent : start a service specified by an intent 3. force-stop package : force stop everything associated with package 4. kill-all : kill all background processes 5. profile start process file : start profiler on process, write result to file 6. profile stop process : stop profiler on process 7. display-size [reset / w*h] : override display size 8. display-density new_dpi : override display density adb shell dpm command device policy manager adb shell screencap /sdcard/screen.png Take a screenshot of device display adb shell screenrecord [option] /sdcard/demo.mp4 Stop the screen recording by pressing Control + C; otherwise, the recording stops automatically at three minutes or the time limit set by --time-limit Options: --help : Help --size w*h : default is 1280*720 if supported by device --bit-rate rate : in megabits per second (4Mbps -> enter value 4000000) --time-limit time : time limit in seconds. default is 180 --verbose : display log information adb shell dmesg Print kernel debugging message to screen adb shell sqlite3 /path_in_device/file_name.db start sqlite3 command line program","title":"General Commands"},{"location":"bonus/adb_commands/#package-manager","text":"adb shell pm [command] Commands Description list packages [option] filter Prints all packages, optionally only those whose package name contains the text in filter Options: -f : see their associated files -d : filter to only show disabled packages -e : show enabled packages -s : show system packages -3 : show third party packages -i : see the installer for the packages -u : include uninstalled packages --user uid : user space to query list permission-groups print all known permission groups list permission [option] group Print all known permissions, optionally only those in groups Options: -g : organized by group -f : print all information -s : short summary -d : list dangerous permissions -u : list only the permissions users will see list features Print all features list libraries Libraries supported by current device list users all users on the system path package Path to apk of the given package clear package delete all data associated to package grant package permission Grant a permission to an app revoke package permission Revoke a permission from an app set-install location location Change the default install location Options: 0: auto, let the system decide 1: internal 2: external get-install-location return current default install location create-user user_name Create new user # supported in multi-user devices only remove-user uid Remove user with given user_id and data associated with them get-max-users Remove user with given user_id and data associated with them","title":"Package Manager"},{"location":"bonus/gen_maths/","text":"Git \u00b6 Problem Solution Sum of first n natural numbers $$ n(n+1) \\over 2 $$ Sum of first n whole numbers $$ n(n-1) \\over 2 $$ \\[ (a+b)^n \\] \\[ C_0^n a^n + C_1^n a^{n-1} b + C_2^n a^{n-2} b^2 + ... + C_n^n b^n \\] \\[ \\] Trignometry \u00b6 Problem Solution \\[ \\sin 2A \\] $$ 2 \\sin A \\cos A $$ $$ {2 \\tan A} \\over {1 + \\tan ^2 A} $$ \\[ \\cos 2A \\] \\[ \\cos ^2 A - \\sin ^2 A \\] \\[ {1 - \\tan ^2 A} \\over {1 + \\tan ^2 A} \\]","title":"General Maths"},{"location":"bonus/gen_maths/#git","text":"Problem Solution Sum of first n natural numbers $$ n(n+1) \\over 2 $$ Sum of first n whole numbers $$ n(n-1) \\over 2 $$ \\[ (a+b)^n \\] \\[ C_0^n a^n + C_1^n a^{n-1} b + C_2^n a^{n-2} b^2 + ... + C_n^n b^n \\] \\[ \\]","title":"Git"},{"location":"bonus/gen_maths/#trignometry","text":"Problem Solution \\[ \\sin 2A \\] $$ 2 \\sin A \\cos A $$ $$ {2 \\tan A} \\over {1 + \\tan ^2 A} $$ \\[ \\cos 2A \\] \\[ \\cos ^2 A - \\sin ^2 A \\] \\[ {1 - \\tan ^2 A} \\over {1 + \\tan ^2 A} \\]","title":"Trignometry"},{"location":"bonus/git/","text":"Commands Description git init Initialize a git repository git status Basic details like current branch, untracked files etc git log Details like commit hash, author name, commit date etc 1. git add file_name 2. git add . 1. Stage specific file 2. Stage all files in current folder 1. git reset file_name 2. git reset HEAD -- . 3. git reset 1. Unstage specific file 2. Unstage all file in current folder and its subfolders 3. Unstage all files in the project git commit [option] 1. -q 2. -v 3. -F <file> 4. --author <author> 5. -m <message> 6. --reset-author 7. -e 8. --status 9. -a 10. --interactive 11. -p 12. --dry-run 13. --branch Commit staged changes 1. suppress summary after successful commit 2. show diff in commit message template 3. read message from file 4. override author for commit 5. commit message 6. the commit is authored by me now (used with -C/-c/--amend) 7. force edit of commit 8. include status in commit message template 9. commit all changed files 10. interactively add files 11. interactively add changes 12. show what would be committed 13. show branch information git remote [options] 1. -v 2. add <name> <url> 3. rename <old> <new> 4. remove <name> 5. set-head <name> (-a / -d / <branch>) 6. show [-n] <name> 7. prune [-n / --dry-run] <name> 8. -v update [-p] [(<group> / <remote>)...] 9. set-branches [--add] <name> <branch>... 10. get-url [--push] [--all] <name> 11. set-url [--push] <name> <newurl> [<oldurl>] 12. set-url --add <name> <newurl> 13. set-url --delete <name> <url> Git remote operations 1. verbose 2. add a remote with given name 3. rename remote name 4. remove remote locally 5. Sets or deletes the default branch (i.e. the target of the symbolic-ref refs/remotes/\\ /HEAD) for the named remote. 6. print details about remote 7. Deletes stale references associated with \\ . 8. Fetch updates for remotes or remote groups in the repository as defined by remotes.\\ . 9. Changes the list of branches tracked by the named remote 10. Retrieves the URLs for a remote. By default, only the first URL is listed. 11. Changes push URLs for the remote. If \\ doesn\u2019t match any URL, an error occurs and nothing is changed. 12. Instead of changing existing URLs, new URL is added. 13. All URLs matching regex \\ are deleted for remote \\ . Trying to delete all non-push URLs is an error.","title":"Git Commands"},{"location":"bonus/markdown/","text":"Markdown can be considered as the simplified version of HTML and CSS. It is mainly used in the documentation websites. You may have seen the github repository's description below the files and folder inside the project directory, that comes from a file names as README.md (md is file extension for markdown) markdown supports inline html and css tags, i.e. you can write any amount of html code within a markdown file. Tag Output Headings: # Heading_1 ## Heading_2 ### Heading_3 Heading or title level; more the hashes, smaller the size of text after it. Just like <h1> , <h2> or <h3> tags in HTML Heading_1 Heading_2 Heading_3 --- Three dashes means a horizontal line, alternate of <hr> tag in HTML Text Formatting: 1. **bold_text** 2. _Italic_text_ 3. **_Bold_and_italic_text_** 4. ~~Stiked_through_Text~~ 1. Bold_text 2. Italic_text 3. Bold_and_italic_text 4. ~~Striked_through_text~~ Lists: 1. List_1 1. Sub_list 1.1 1. Sub_list 1.1.1 2. sub_list 1.2 2. List_2 3. List_3 - unordered_list_item_1 - unordered_list_item_2 Use tabs or 4 spaces for sublists and following output will show List_1 Sub_list 1.1 Sub_list 1.1.1 Sub_list 1.2 List_2 List_3 unordered_list_item_1 unordered_list_item_2 Code and syntax highlighting: `single_line_monospace_formatted_text` ` ` `python def hello(arg1): print(\"hello world\") ` ` ` >Blockquote line 1 >Blockquote line 2 Use tick (`) for code formatting single_line_monospace_formatted_text def hello (arg): print(\"hello world\") Blockquote line 1 Blockquote line 2 Image Links: 1. ![alt text](/img/github.png \"Logo Title\") 2. [alt text][logo] [logo]: https://bit.ly/35aY94T \"Twitter Logo\" - alt text: text which will show in place of image, in case image fails to load - Title will show when you hover over image 1. 2. Here [logo]: https://bit.ly/35aY94T \"Twitter Logo\" is present at end of page Links Style: 1. Inline-style link: [text link](https://google.com) 2. Link with title: [Link with title](google.com \"Google\") 3. Reference Style: [Reference-style link][1] [1]: http://slashdot.org 1. Inline-style link: text link 2. Inline-style link with title: text link with title Title (Google) will show when you hover over link 3. Reference Style: Reference-style link Here [1]: http://slashdot.org is present at the end of page","title":"Markdown"},{"location":"bonus/shell/","text":"Coming soon...!","title":"Shell Scripting"},{"location":"data_structure/","text":"","title":"Index"},{"location":"data_structure/array_qus/","text":"Array \u00b6 Problem 1: Maximum Consecutive gap Desc: Given an unsorted integer array A of size N. Find the maximum difference between the successive elements in its sorted form. You may assume that all the elements in the array are non-negative integers and fit in the 32-bit signed integer range. You may also assume that the difference will not overflow. Return 0 if the array contains less than 2 elements. class Solution : # @param A : tuple of integers # @return an integer def maximumGap ( self , A ): B = sorted ( A ) mx = 0 for i in range ( len ( B ) - 1 ): mx = max ( mx , abs ( B [ i ] - B [ i + 1 ])) return mx hey","title":"Array"},{"location":"data_structure/array_qus/#array","text":"","title":"Array"},{"location":"data_structure/big_o_cheat_sheet/","text":"Big O Cheat sheet \u00b6 .tg {border-collapse:collapse;border-spacing:0;} .tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; overflow:hidden;padding:3px 16px;word-break:normal;} .tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; font-weight:normal;overflow:hidden;padding:3px 16px;word-break:normal;} .tg .tg-wa1i{font-weight:bold;text-align:center;vertical-align:middle} .tg .tg-75ta{background-color:#c0c0c0;border-color:inherit;color:#ffffff;text-align:center;vertical-align:middle} .tg .tg-4qva{background-color:#c0c0c0;border-color:inherit;color:#000000;font-family:\"Arial Black\", Gadget, sans-serif !important;; font-size:100%;text-align:center;vertical-align:middle} .tg .tg-nrix{text-align:center;vertical-align:middle} .tg .tg-z5o4{font-family:\"Lucida Console\", Monaco, monospace !important;;text-align:center;vertical-align:middle} Time Complexity Space Complexity Best - \u03a9 Average - \u03b8 Worst - O Worst - O Quick Sort n log(n) n log(n) n 2 log(n) Bubble Sort n n 2 n 2 1 Merge Sort n log(n) n log(n) n log(n) n Insertion Sort n n 2 n 2 1 Selection Sort n 2 n 2 n 2 1 Heap Sort n log(n) n log(n) n log(n) 1 Bucket Sort n + k n + k n 2 n Radix Sort nk nk nk n + k","title":"Big O Cheat sheet"},{"location":"data_structure/big_o_cheat_sheet/#big-o-cheat-sheet","text":".tg {border-collapse:collapse;border-spacing:0;} .tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; overflow:hidden;padding:3px 16px;word-break:normal;} .tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; font-weight:normal;overflow:hidden;padding:3px 16px;word-break:normal;} .tg .tg-wa1i{font-weight:bold;text-align:center;vertical-align:middle} .tg .tg-75ta{background-color:#c0c0c0;border-color:inherit;color:#ffffff;text-align:center;vertical-align:middle} .tg .tg-4qva{background-color:#c0c0c0;border-color:inherit;color:#000000;font-family:\"Arial Black\", Gadget, sans-serif !important;; font-size:100%;text-align:center;vertical-align:middle} .tg .tg-nrix{text-align:center;vertical-align:middle} .tg .tg-z5o4{font-family:\"Lucida Console\", Monaco, monospace !important;;text-align:center;vertical-align:middle} Time Complexity Space Complexity Best - \u03a9 Average - \u03b8 Worst - O Worst - O Quick Sort n log(n) n log(n) n 2 log(n) Bubble Sort n n 2 n 2 1 Merge Sort n log(n) n log(n) n log(n) n Insertion Sort n n 2 n 2 1 Selection Sort n 2 n 2 n 2 1 Heap Sort n log(n) n log(n) n log(n) 1 Bucket Sort n + k n + k n 2 n Radix Sort nk nk nk n + k","title":"Big O Cheat sheet"},{"location":"data_structure/game_theory/","text":"Game Theory \u00b6 In all game theory related problems, it is pre-assumed that all players will play optimally (i.e. meaning players will not make a move that causes them to lose the game if a winning move exists.) P: Given there are two players, Alice and Bob and a number with value 0. In a single turn a player can add 1 or 2 to the number. Players taking alternate turns and first person to make given number's value to x will be considered as winner. consider alice will take the first move. for example x = 5 A: 2(total=2), B: 1 or 2(total: 3, 5), A: 2 or 1(total:5) so in case of x = 5, player 1(with first turn) will always win. example x = 6 A: 1 or 2 (total: 1 or 2), B: 2 (total: 3), A: 1 or 2 (total: 4 or 5), B: 2 or 1(total: 6) so in case of x = 6, player 2 will always win - Here in this case, for any x, if x%3 == 0, player 2 wins, else player 1 will win P2: Given x number of coins, in a single turn the player can take 2, 3 or 5 coins out of the total, player who makes last possible move will be called a winner. (or if a player cant make a move, player will lose) for x = 2, 3, 5 player 1 will win for x = 4, alice can take 3 coins, so no move possible for bob, i.e alice made the last move and won for i in range(9), for player 1: [\u274c, \u274c, \u2714, \u2714, \u2714, \u2714, \u2714, \u274c, \u274c, \u2714] where \u2714: will win P3 Given N number of coin piles, a player can take any number of coins from any single pile. player who cannot make a move will lose. - [x, x] >> player 2 will win - [x] >> player 1 will win - [x, y] >> player 1 will win, player 1 can take (y-x) from y and make piles look like [x, x], similar condition as first for player 2. - If for any move a mirror move(same move as the prev move) available, player 2 will win, wlse player 1 will win. -","title":"Game Theory"},{"location":"data_structure/game_theory/#game-theory","text":"In all game theory related problems, it is pre-assumed that all players will play optimally (i.e. meaning players will not make a move that causes them to lose the game if a winning move exists.) P: Given there are two players, Alice and Bob and a number with value 0. In a single turn a player can add 1 or 2 to the number. Players taking alternate turns and first person to make given number's value to x will be considered as winner. consider alice will take the first move. for example x = 5 A: 2(total=2), B: 1 or 2(total: 3, 5), A: 2 or 1(total:5) so in case of x = 5, player 1(with first turn) will always win.","title":"Game Theory"},{"location":"data_structure/graphs/","text":"Graph \u00b6 Graph is a very generic/loose term. following other DS can be considered as graph too Trees / Tries Linked list Graph is defined as set of vertices and edges where vertices are entities and edges are relationship among those entities. Simple Graphs with maximum number of edges (no parallel edge) is called clique (K 2 : clique of 2 nodes and N C 2 edges) Types of Graphs \u00b6 cyclic / acyclic if you start from a vertex of graph an by some path, you can reach back to that vertex again without re-using any edge, then graph is said to be cyclic. Be careful when dealing with directional graphs connected / disconnected connected means from any vertex, you can reach any other vertex. So, you have to be carefull when dealing with directed graphs. graph with only one connected component directional / undirectional weighted / unweighted Graph Representation \u00b6 set of vertices, pair of vertices as an edge O(e) , where e is number of edges to check if there is an edge between two vertices. O(n + e) space complexity. Adjacency list O(n) to check if there is an edge between two vertices. O(n + e) space complexity. preferred when few edges or sparse graph. Adjacency matrics O(n) to check if there is an edge between two vertices. O(n 2 ) space complexity. preferred when e ~= max no of edges possible. Trail: Going from Node a to node e like: a - e1 - b - e3 - c - e2 - d - e1 - e Path: A trail from one node to another without re-using a vertex Walk: A trail from one node to another without re-using an edge . every path is a walk. a > b > a > c : this is a walk, but not a path Graph Traversal \u00b6 BFS DFS","title":"Graph"},{"location":"data_structure/graphs/#graph","text":"Graph is a very generic/loose term. following other DS can be considered as graph too Trees / Tries Linked list Graph is defined as set of vertices and edges where vertices are entities and edges are relationship among those entities. Simple Graphs with maximum number of edges (no parallel edge) is called clique (K 2 : clique of 2 nodes and N C 2 edges)","title":"Graph"},{"location":"data_structure/graphs/#types-of-graphs","text":"cyclic / acyclic if you start from a vertex of graph an by some path, you can reach back to that vertex again without re-using any edge, then graph is said to be cyclic. Be careful when dealing with directional graphs connected / disconnected connected means from any vertex, you can reach any other vertex. So, you have to be carefull when dealing with directed graphs. graph with only one connected component directional / undirectional weighted / unweighted","title":"Types of Graphs"},{"location":"data_structure/graphs/#graph-representation","text":"set of vertices, pair of vertices as an edge O(e) , where e is number of edges to check if there is an edge between two vertices. O(n + e) space complexity. Adjacency list O(n) to check if there is an edge between two vertices. O(n + e) space complexity. preferred when few edges or sparse graph. Adjacency matrics O(n) to check if there is an edge between two vertices. O(n 2 ) space complexity. preferred when e ~= max no of edges possible. Trail: Going from Node a to node e like: a - e1 - b - e3 - c - e2 - d - e1 - e Path: A trail from one node to another without re-using a vertex Walk: A trail from one node to another without re-using an edge . every path is a walk. a > b > a > c : this is a walk, but not a path","title":"Graph Representation"},{"location":"data_structure/graphs/#graph-traversal","text":"BFS DFS","title":"Graph Traversal"},{"location":"data_structure/sorting/","text":"Sorting Techniques \u00b6 P1 : Given an unteger array, find kth largest element, given that you cant use extra memory one way could be findint the largest element in the array and swap it with the last element of the array then reduce the array upto second last elemnt and repeat this above and this step k times at last we would have kth largest element in the remaining array as last element of it. In one operation we are traversing N elements and we are doing this operations k times, So, time complexity => O(kN) and if we perform the same operation N times then we would have sorted array with time complexity => O(N 2 ). this method of sorting is known as Selection Sort . If we traverse following way: we can swap only adjecent elements i.e. if A[i] > A[i+1], A[i] <==> A[i+1] here also we have to perform k operations where each operation is to parse N elements to get kth largest element. And if we continue operations for N-1 times, we would have sorted array at last. and time complexity would be O(N 2 ). This sorting technique is known as Bubble sort Algorithm. Cost wise Selection sort is less costly as there are atmost one swap, whereas there are atmost n-1 swaps in Bubble sort . P2 : During a card game, dealer can distribute only one card at a time, problem is to sort cards which you have continuously as you receive one here you place first card at first position. then as you keep on receiving cards, you find a correct position, move other cards if you have to to make space and then put current card at its correct position. Here in first opration: we have to find a correct place for the element, linear search would be O(N), but here the previous cards would be already sorted so we can use binary search which is of O(logN). once we find the position, we move atmost N cards to the right, taking O(N) So one operation costs o(logN + N) => O(N). And to complete sort we have to perform N operations, thus making total time complexity of order O(N 2 ) THis type of sorting technique is known as Insertion Sort P3 : Given an array where all odds and even elements are sorted, we are required to sort the whole array 3, 9, 2, 4, 25, 10, 19 - we can make two separate arrays, one containing all odd elements and other containing all the even elements. - then using two pointers approach, placing one pointer at start of odd array and other at start of even array, let say i, j - if Odd[i] < Even[j], select Odd[i] and i++, else select Even[j]++. - keep on placing selected elements in a separate array and at last, we will have sorted array - here diving array into two is of O(N, then selecting smaller elements would take O(N), thus total complexity would be O(N+N) => O(N). - this solution is conquer part of the divide and conquer solution approach - Solution where we divide an array into parts, sort them, and then merge is known as Merge Sort . - we keep on dividing the array into two parts > O(logN) and sorting, So, time complexity of merge sort is O(NlogN). - Space complexity would be O(N) P4 : Inversion Count. inversion means there present i, j where i < j and A[i] < A[j], we need to count total number of such inversions in array 4, 5, 1, 2, 6, 3 - here inversion present at indexes: (0, 2), (0, 3), (0, 5), (1, 2), (1, 3), (1, 5), (4, 5) ==> total of 7 inversions","title":"Sorting Techniques"},{"location":"data_structure/sorting/#sorting-techniques","text":"P1 : Given an unteger array, find kth largest element, given that you cant use extra memory one way could be findint the largest element in the array and swap it with the last element of the array then reduce the array upto second last elemnt and repeat this above and this step k times at last we would have kth largest element in the remaining array as last element of it. In one operation we are traversing N elements and we are doing this operations k times, So, time complexity => O(kN) and if we perform the same operation N times then we would have sorted array with time complexity => O(N 2 ). this method of sorting is known as Selection Sort . If we traverse following way: we can swap only adjecent elements i.e. if A[i] > A[i+1], A[i] <==> A[i+1] here also we have to perform k operations where each operation is to parse N elements to get kth largest element. And if we continue operations for N-1 times, we would have sorted array at last. and time complexity would be O(N 2 ). This sorting technique is known as Bubble sort Algorithm. Cost wise Selection sort is less costly as there are atmost one swap, whereas there are atmost n-1 swaps in Bubble sort . P2 : During a card game, dealer can distribute only one card at a time, problem is to sort cards which you have continuously as you receive one here you place first card at first position. then as you keep on receiving cards, you find a correct position, move other cards if you have to to make space and then put current card at its correct position. Here in first opration: we have to find a correct place for the element, linear search would be O(N), but here the previous cards would be already sorted so we can use binary search which is of O(logN). once we find the position, we move atmost N cards to the right, taking O(N) So one operation costs o(logN + N) => O(N). And to complete sort we have to perform N operations, thus making total time complexity of order O(N 2 ) THis type of sorting technique is known as Insertion Sort P3 : Given an array where all odds and even elements are sorted, we are required to sort the whole array 3, 9, 2, 4, 25, 10, 19 - we can make two separate arrays, one containing all odd elements and other containing all the even elements. - then using two pointers approach, placing one pointer at start of odd array and other at start of even array, let say i, j - if Odd[i] < Even[j], select Odd[i] and i++, else select Even[j]++. - keep on placing selected elements in a separate array and at last, we will have sorted array - here diving array into two is of O(N, then selecting smaller elements would take O(N), thus total complexity would be O(N+N) => O(N). - this solution is conquer part of the divide and conquer solution approach - Solution where we divide an array into parts, sort them, and then merge is known as Merge Sort . - we keep on dividing the array into two parts > O(logN) and sorting, So, time complexity of merge sort is O(NlogN). - Space complexity would be O(N) P4 : Inversion Count. inversion means there present i, j where i < j and A[i] < A[j], we need to count total number of such inversions in array 4, 5, 1, 2, 6, 3 - here inversion present at indexes: (0, 2), (0, 3), (0, 5), (1, 2), (1, 3), (1, 5), (4, 5) ==> total of 7 inversions","title":"Sorting Techniques"},{"location":"data_structure/two_pointer/","text":"Two Pointers \u00b6 P1: Given a sorted array, arr and an integer k, find a pair [i, j] where arr[i] + arr[j] = k Brute force would be two looks and check for every i and j. O(N 2 ). Or, for every we can search for j where A[j] = k - A[i], here searching can be via binary search i.e. O(log(N)) and for N i, total complexity can be O(N.Log(N)). Two Pointers concept \u00b6 Pointer is just a variable pointing to any index of the array. We only have to consider two problems in pointers approach: Where to place both How to update both This concept mostly works for sorted arrays So in above problem, let's first put both pointers at each end of array A[i] + A[j] == k , return i, j A[i] + A[j] < k, then we only have to push left side (i) pointer to right, because only that will increase sum value A[i] + A[j] > k, then we only have to push right side (j) pointer to left Stopping condition in while loop would be when j <= i, because after this we are just checking with same values again. P2: Given a sorted array, arr and an integer k, find a pair [i, j] where arr[j] - arr[i] = k Let's first put both pointers at each end of array A[j] - A[i] == k , return i, j A[j] - A[i] < k, but in this case i++ and j-- both will more decrease the diffrence So, we should put i at 0 and j at 1 A[j] - A[i] == k , return i, j A[j] - A[i] < k, we can increase j till the length of array A[j] - A[i] > k, we can increase i till the length of array loop will run till j reaches the end of array (j == n) With two pointers solution in both of above problem, solution is reduced to O(N) P3: Given a sorted array, arr and an integer L, find a triplet [i, j, k] where arr[i] + arr[j] + arr[k] = L - Here the brute force would be simply O(N 3 ) - If we apply concept like two pointers, for every i, find a pair(j, k) such that arr[j] + arr[k] = L - arr[i]. this solution would be O(N).O(N) >> O(N 2 , which is way better than brute force) P3: Given a sorted array, arr and an integer M, find a quadruple [i, j, k, l] where arr[i] + arr[j] + arr[k] + arr[l]= M - here also we can apply same conept as, for every i, j find k, l. and it will be of O(N 3 ) - another way could be we can create an array with sum of all possible pair of arr, i.e. for all i, j, B[index] = arr[i] + arr[j], also we can do the same for k and l. So, at last we would have two arrays................... P3: Given an unsorted array, find a pair i, j such that sum(arr[i:j+1]) == k - Here we can make a prefix sum array, where value at each index i => sum(arr[:i+1]). And we can say that prefix sum array will be sorted, thus two pointer concept can be applied. - prefix sum array changes the problem as to find i, j such that P[j] - P[i] = k. - forming a prefix sum requires O(N), and finding i, j is O(N) using two pointers, SO, whole will be of O(N + N) >> O(N).","title":"Two Pointers"},{"location":"data_structure/two_pointer/#two-pointers","text":"P1: Given a sorted array, arr and an integer k, find a pair [i, j] where arr[i] + arr[j] = k Brute force would be two looks and check for every i and j. O(N 2 ). Or, for every we can search for j where A[j] = k - A[i], here searching can be via binary search i.e. O(log(N)) and for N i, total complexity can be O(N.Log(N)).","title":"Two Pointers"},{"location":"data_structure/two_pointer/#two-pointers-concept","text":"Pointer is just a variable pointing to any index of the array. We only have to consider two problems in pointers approach: Where to place both How to update both This concept mostly works for sorted arrays So in above problem, let's first put both pointers at each end of array A[i] + A[j] == k , return i, j A[i] + A[j] < k, then we only have to push left side (i) pointer to right, because only that will increase sum value A[i] + A[j] > k, then we only have to push right side (j) pointer to left Stopping condition in while loop would be when j <= i, because after this we are just checking with same values again. P2: Given a sorted array, arr and an integer k, find a pair [i, j] where arr[j] - arr[i] = k Let's first put both pointers at each end of array A[j] - A[i] == k , return i, j A[j] - A[i] < k, but in this case i++ and j-- both will more decrease the diffrence So, we should put i at 0 and j at 1 A[j] - A[i] == k , return i, j A[j] - A[i] < k, we can increase j till the length of array A[j] - A[i] > k, we can increase i till the length of array loop will run till j reaches the end of array (j == n) With two pointers solution in both of above problem, solution is reduced to O(N) P3: Given a sorted array, arr and an integer L, find a triplet [i, j, k] where arr[i] + arr[j] + arr[k] = L - Here the brute force would be simply O(N 3 ) - If we apply concept like two pointers, for every i, find a pair(j, k) such that arr[j] + arr[k] = L - arr[i]. this solution would be O(N).O(N) >> O(N 2 , which is way better than brute force) P3: Given a sorted array, arr and an integer M, find a quadruple [i, j, k, l] where arr[i] + arr[j] + arr[k] + arr[l]= M - here also we can apply same conept as, for every i, j find k, l. and it will be of O(N 3 ) - another way could be we can create an array with sum of all possible pair of arr, i.e. for all i, j, B[index] = arr[i] + arr[j], also we can do the same for k and l. So, at last we would have two arrays................... P3: Given an unsorted array, find a pair i, j such that sum(arr[i:j+1]) == k - Here we can make a prefix sum array, where value at each index i => sum(arr[:i+1]). And we can say that prefix sum array will be sorted, thus two pointer concept can be applied. - prefix sum array changes the problem as to find i, j such that P[j] - P[i] = k. - forming a prefix sum requires O(N), and finding i, j is O(N) using two pointers, SO, whole will be of O(N + N) >> O(N).","title":"Two Pointers concept"},{"location":"mlds/how_to_ml/","text":"How to \u00b6 import pandas df = pd . read_csv ( 'data.csv' )","title":"How to"},{"location":"mlds/how_to_ml/#how-to","text":"import pandas df = pd . read_csv ( 'data.csv' )","title":"How to"},{"location":"mlds/learning_path/","text":"","title":"Learning path"},{"location":"mlds/readme/","text":"","title":"Readme"},{"location":"other/dbms/1/","text":"DBMS \u00b6","title":"DBMS"},{"location":"other/dbms/1/#dbms","text":"","title":"DBMS"},{"location":"other/mongo_db/","text":"MONGODB \u00b6 MongoDB is a nosql dbms. it stores data in form of document (json line format), instead of tables Terminology \u00b6 atlas compass mongo shell mongo deamon bson","title":"MONGODB"},{"location":"other/mongo_db/#mongodb","text":"MongoDB is a nosql dbms. it stores data in form of document (json line format), instead of tables","title":"MONGODB"},{"location":"other/mongo_db/#terminology","text":"atlas compass mongo shell mongo deamon bson","title":"Terminology"},{"location":"other/mongo_db/mongo_cli/","text":"","title":"Mongo cli"},{"location":"other/mongo_db/mongo_how_to/","text":"","title":"Mongo how to"},{"location":"other/operating_system/1/","text":"Operating System 1 \u00b6 Kernel:","title":"Operating System 1"},{"location":"other/operating_system/1/#operating-system-1","text":"Kernel:","title":"Operating System 1"},{"location":"other/software_engineering/","text":"","title":"Index"},{"location":"other/software_engineering/UML/","text":"","title":"UML"},{"location":"other/software_engineering/class_diagram/","text":"UML Class Diagram \u00b6 Class Attributes Operation Abstract Class Relationship Dependencies Generalization Associations Aggregation Composition Class: - Parrots, Pigeons, Hummingbirds, Hen, Penguin, Ostrich, all are considered as birds. - If we talk about common attributes: - Wings - color - beak - chirp_style - . . . - If we talk about behaviours - fly - like run and fly | fly low/high - chirp - shrill | loud | musical | speak like human Here we can see following points: - attributes are like features, which contains a single value from start (it can change later), in object oriented programming world these are represented by variables - behaviours are like working, things happen inside these, in object oriented programming world, these are represented by methods (or functions) - All names mentioned above are belong to class birds, they all have attributes (features), and they all show birds behaviour (can be different, like parrot flies low but eagle flies high) - So, those all are objects of the birds class. {% include \"sample_problem.md\" %}","title":"UML Class Diagram"},{"location":"other/software_engineering/class_diagram/#uml-class-diagram","text":"Class Attributes Operation Abstract Class Relationship Dependencies Generalization Associations Aggregation Composition Class: - Parrots, Pigeons, Hummingbirds, Hen, Penguin, Ostrich, all are considered as birds. - If we talk about common attributes: - Wings - color - beak - chirp_style - . . . - If we talk about behaviours - fly - like run and fly | fly low/high - chirp - shrill | loud | musical | speak like human Here we can see following points: - attributes are like features, which contains a single value from start (it can change later), in object oriented programming world these are represented by variables - behaviours are like working, things happen inside these, in object oriented programming world, these are represented by methods (or functions) - All names mentioned above are belong to class birds, they all have attributes (features), and they all show birds behaviour (can be different, like parrot flies low but eagle flies high) - So, those all are objects of the birds class. {% include \"sample_problem.md\" %}","title":"UML Class Diagram"},{"location":"other/software_engineering/extra/","text":"figure out your end goal work for a big company web development, gaming, data science, mobile apps what are you naturally good at check pay scales, job security, etc for diff types of dev jobs choose your programming language fundamentals first learn multiple languages","title":"Extra"},{"location":"other/software_engineering/sample_problem/","text":"Design Problem - Sample School of Programmers \u00b6 Following is just a small level sample problem given to you by a client You have think of all steps from start to end (deployed system) Even before you type your first letter of code, there are many steps in actual software development The Sample school of programmers needs a new system to track all of its students, professors and courses. It wants to keep track of what courses are offered, who teaches each course and which students are enrolled in those courses. It would also like to be able to track the grades of each of its students across all courses. For each student and professor the school needs to know their address, phone number, name and age. Each course has a maximum and minimum number of students that they can enrol. If the minimum number of students is not reached then the course will be cancelled. Each course is taught by at least one professor but sometimes may be taught by many. Professors are salaried employees at the Sample School of programmers and therefore we need to keep track of how much they make each year. If a professor teaches more than 4 courses in a semester then they are granted a one time bonus of $20,000. Students can be both local or international students and full or part time. A student is considered a part time student if they are enrolled in 1 or 2 courses during any given semester. The maximum amount of courses a student may be enrolled in at one time is 6. Students receive grades from each course, these grades are numeric in the range of 0-100. Any students that have an average grade across all enrolled courses lower than 60% is said to be on academic probation. NOTE: This system will be reset and updated at the end of each semester Reference: [x] Tech with tim","title":"Design Problem - Sample School of Programmers"},{"location":"other/software_engineering/sample_problem/#design-problem-sample-school-of-programmers","text":"Following is just a small level sample problem given to you by a client You have think of all steps from start to end (deployed system) Even before you type your first letter of code, there are many steps in actual software development The Sample school of programmers needs a new system to track all of its students, professors and courses. It wants to keep track of what courses are offered, who teaches each course and which students are enrolled in those courses. It would also like to be able to track the grades of each of its students across all courses. For each student and professor the school needs to know their address, phone number, name and age. Each course has a maximum and minimum number of students that they can enrol. If the minimum number of students is not reached then the course will be cancelled. Each course is taught by at least one professor but sometimes may be taught by many. Professors are salaried employees at the Sample School of programmers and therefore we need to keep track of how much they make each year. If a professor teaches more than 4 courses in a semester then they are granted a one time bonus of $20,000. Students can be both local or international students and full or part time. A student is considered a part time student if they are enrolled in 1 or 2 courses during any given semester. The maximum amount of courses a student may be enrolled in at one time is 6. Students receive grades from each course, these grades are numeric in the range of 0-100. Any students that have an average grade across all enrolled courses lower than 60% is said to be on academic probation. NOTE: This system will be reset and updated at the end of each semester Reference: [x] Tech with tim","title":"Design Problem - Sample School of Programmers"}]}